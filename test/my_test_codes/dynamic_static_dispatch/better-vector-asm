
better-vector-g++:     file format elf64-x86-64


Disassembly of section .init:

0000000000000bb0 <_init>:
 bb0:	48 83 ec 08          	sub    rsp,0x8
 bb4:	48 8b 05 2d 34 20 00 	mov    rax,QWORD PTR [rip+0x20342d]        # 203fe8 <__gmon_start__>
 bbb:	48 85 c0             	test   rax,rax
 bbe:	74 02                	je     bc2 <_init+0x12>
 bc0:	ff d0                	call   rax
 bc2:	48 83 c4 08          	add    rsp,0x8
 bc6:	c3                   	ret    

Disassembly of section .plt:

0000000000000bd0 <.plt>:
 bd0:	ff 35 6a 33 20 00    	push   QWORD PTR [rip+0x20336a]        # 203f40 <_GLOBAL_OFFSET_TABLE_+0x8>
 bd6:	ff 25 6c 33 20 00    	jmp    QWORD PTR [rip+0x20336c]        # 203f48 <_GLOBAL_OFFSET_TABLE_+0x10>
 bdc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000000be0 <std::__throw_bad_alloc()@plt>:
 be0:	ff 25 6a 33 20 00    	jmp    QWORD PTR [rip+0x20336a]        # 203f50 <std::__throw_bad_alloc()@GLIBCXX_3.4>
 be6:	68 00 00 00 00       	push   0x0
 beb:	e9 e0 ff ff ff       	jmp    bd0 <.plt>

0000000000000bf0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>:
 bf0:	ff 25 62 33 20 00    	jmp    QWORD PTR [rip+0x203362]        # 203f58 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@GLIBCXX_3.4.21>
 bf6:	68 01 00 00 00       	push   0x1
 bfb:	e9 d0 ff ff ff       	jmp    bd0 <.plt>

0000000000000c00 <__cxa_atexit@plt>:
 c00:	ff 25 5a 33 20 00    	jmp    QWORD PTR [rip+0x20335a]        # 203f60 <__cxa_atexit@GLIBC_2.2.5>
 c06:	68 02 00 00 00       	push   0x2
 c0b:	e9 c0 ff ff ff       	jmp    bd0 <.plt>

0000000000000c10 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>:
 c10:	ff 25 52 33 20 00    	jmp    QWORD PTR [rip+0x203352]        # 203f68 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@GLIBCXX_3.4.21>
 c16:	68 03 00 00 00       	push   0x3
 c1b:	e9 b0 ff ff ff       	jmp    bd0 <.plt>

0000000000000c20 <operator delete(void*)@plt>:
 c20:	ff 25 4a 33 20 00    	jmp    QWORD PTR [rip+0x20334a]        # 203f70 <operator delete(void*)@GLIBCXX_3.4>
 c26:	68 04 00 00 00       	push   0x4
 c2b:	e9 a0 ff ff ff       	jmp    bd0 <.plt>

0000000000000c30 <operator new(unsigned long)@plt>:
 c30:	ff 25 42 33 20 00    	jmp    QWORD PTR [rip+0x203342]        # 203f78 <operator new(unsigned long)@GLIBCXX_3.4>
 c36:	68 05 00 00 00       	push   0x5
 c3b:	e9 90 ff ff ff       	jmp    bd0 <.plt>

0000000000000c40 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>:
 c40:	ff 25 3a 33 20 00    	jmp    QWORD PTR [rip+0x20333a]        # 203f80 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@GLIBCXX_3.4>
 c46:	68 06 00 00 00       	push   0x6
 c4b:	e9 80 ff ff ff       	jmp    bd0 <.plt>

0000000000000c50 <std::allocator<char>::~allocator()@plt>:
 c50:	ff 25 32 33 20 00    	jmp    QWORD PTR [rip+0x203332]        # 203f88 <std::allocator<char>::~allocator()@GLIBCXX_3.4>
 c56:	68 07 00 00 00       	push   0x7
 c5b:	e9 70 ff ff ff       	jmp    bd0 <.plt>

0000000000000c60 <__stack_chk_fail@plt>:
 c60:	ff 25 2a 33 20 00    	jmp    QWORD PTR [rip+0x20332a]        # 203f90 <__stack_chk_fail@GLIBC_2.4>
 c66:	68 08 00 00 00       	push   0x8
 c6b:	e9 60 ff ff ff       	jmp    bd0 <.plt>

0000000000000c70 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>:
 c70:	ff 25 22 33 20 00    	jmp    QWORD PTR [rip+0x203322]        # 203f98 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@GLIBCXX_3.4.21>
 c76:	68 09 00 00 00       	push   0x9
 c7b:	e9 50 ff ff ff       	jmp    bd0 <.plt>

0000000000000c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>:
 c80:	ff 25 1a 33 20 00    	jmp    QWORD PTR [rip+0x20331a]        # 203fa0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@GLIBCXX_3.4.21>
 c86:	68 0a 00 00 00       	push   0xa
 c8b:	e9 40 ff ff ff       	jmp    bd0 <.plt>

0000000000000c90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>:
 c90:	ff 25 12 33 20 00    	jmp    QWORD PTR [rip+0x203312]        # 203fa8 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@GLIBCXX_3.4.21>
 c96:	68 0b 00 00 00       	push   0xb
 c9b:	e9 30 ff ff ff       	jmp    bd0 <.plt>

0000000000000ca0 <std::ios_base::Init::Init()@plt>:
 ca0:	ff 25 0a 33 20 00    	jmp    QWORD PTR [rip+0x20330a]        # 203fb0 <std::ios_base::Init::Init()@GLIBCXX_3.4>
 ca6:	68 0c 00 00 00       	push   0xc
 cab:	e9 20 ff ff ff       	jmp    bd0 <.plt>

0000000000000cb0 <_Unwind_Resume@plt>:
 cb0:	ff 25 02 33 20 00    	jmp    QWORD PTR [rip+0x203302]        # 203fb8 <_Unwind_Resume@GCC_3.0>
 cb6:	68 0d 00 00 00       	push   0xd
 cbb:	e9 10 ff ff ff       	jmp    bd0 <.plt>

0000000000000cc0 <std::allocator<char>::allocator()@plt>:
 cc0:	ff 25 fa 32 20 00    	jmp    QWORD PTR [rip+0x2032fa]        # 203fc0 <std::allocator<char>::allocator()@GLIBCXX_3.4>
 cc6:	68 0e 00 00 00       	push   0xe
 ccb:	e9 00 ff ff ff       	jmp    bd0 <.plt>

Disassembly of section .plt.got:

0000000000000cd0 <__cxa_finalize@plt>:
 cd0:	ff 25 f2 32 20 00    	jmp    QWORD PTR [rip+0x2032f2]        # 203fc8 <__cxa_finalize@GLIBC_2.2.5>
 cd6:	66 90                	xchg   ax,ax

Disassembly of section .text:

0000000000000ce0 <_start>:
     ce0:	31 ed                	xor    ebp,ebp
     ce2:	49 89 d1             	mov    r9,rdx
     ce5:	5e                   	pop    rsi
     ce6:	48 89 e2             	mov    rdx,rsp
     ce9:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
     ced:	50                   	push   rax
     cee:	54                   	push   rsp
     cef:	4c 8d 05 2a 16 00 00 	lea    r8,[rip+0x162a]        # 2320 <__libc_csu_fini>
     cf6:	48 8d 0d b3 15 00 00 	lea    rcx,[rip+0x15b3]        # 22b0 <__libc_csu_init>
     cfd:	48 8d 3d be 04 00 00 	lea    rdi,[rip+0x4be]        # 11c2 <main>
     d04:	ff 15 d6 32 20 00    	call   QWORD PTR [rip+0x2032d6]        # 203fe0 <__libc_start_main@GLIBC_2.2.5>
     d0a:	f4                   	hlt    
     d0b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000000d10 <deregister_tm_clones>:
     d10:	48 8d 3d 01 33 20 00 	lea    rdi,[rip+0x203301]        # 204018 <__TMC_END__>
     d17:	55                   	push   rbp
     d18:	48 8d 05 f9 32 20 00 	lea    rax,[rip+0x2032f9]        # 204018 <__TMC_END__>
     d1f:	48 39 f8             	cmp    rax,rdi
     d22:	48 89 e5             	mov    rbp,rsp
     d25:	74 19                	je     d40 <deregister_tm_clones+0x30>
     d27:	48 8b 05 aa 32 20 00 	mov    rax,QWORD PTR [rip+0x2032aa]        # 203fd8 <_ITM_deregisterTMCloneTable>
     d2e:	48 85 c0             	test   rax,rax
     d31:	74 0d                	je     d40 <deregister_tm_clones+0x30>
     d33:	5d                   	pop    rbp
     d34:	ff e0                	jmp    rax
     d36:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
     d3d:	00 00 00 
     d40:	5d                   	pop    rbp
     d41:	c3                   	ret    
     d42:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
     d46:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
     d4d:	00 00 00 

0000000000000d50 <register_tm_clones>:
     d50:	48 8d 3d c1 32 20 00 	lea    rdi,[rip+0x2032c1]        # 204018 <__TMC_END__>
     d57:	48 8d 35 ba 32 20 00 	lea    rsi,[rip+0x2032ba]        # 204018 <__TMC_END__>
     d5e:	55                   	push   rbp
     d5f:	48 29 fe             	sub    rsi,rdi
     d62:	48 89 e5             	mov    rbp,rsp
     d65:	48 c1 fe 03          	sar    rsi,0x3
     d69:	48 89 f0             	mov    rax,rsi
     d6c:	48 c1 e8 3f          	shr    rax,0x3f
     d70:	48 01 c6             	add    rsi,rax
     d73:	48 d1 fe             	sar    rsi,1
     d76:	74 18                	je     d90 <register_tm_clones+0x40>
     d78:	48 8b 05 71 32 20 00 	mov    rax,QWORD PTR [rip+0x203271]        # 203ff0 <_ITM_registerTMCloneTable>
     d7f:	48 85 c0             	test   rax,rax
     d82:	74 0c                	je     d90 <register_tm_clones+0x40>
     d84:	5d                   	pop    rbp
     d85:	ff e0                	jmp    rax
     d87:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
     d8e:	00 00 
     d90:	5d                   	pop    rbp
     d91:	c3                   	ret    
     d92:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
     d96:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
     d9d:	00 00 00 

0000000000000da0 <__do_global_dtors_aux>:
     da0:	80 3d 89 33 20 00 00 	cmp    BYTE PTR [rip+0x203389],0x0        # 204130 <completed.7698>
     da7:	75 2f                	jne    dd8 <__do_global_dtors_aux+0x38>
     da9:	48 83 3d 17 32 20 00 	cmp    QWORD PTR [rip+0x203217],0x0        # 203fc8 <__cxa_finalize@GLIBC_2.2.5>
     db0:	00 
     db1:	55                   	push   rbp
     db2:	48 89 e5             	mov    rbp,rsp
     db5:	74 0c                	je     dc3 <__do_global_dtors_aux+0x23>
     db7:	48 8b 3d 4a 32 20 00 	mov    rdi,QWORD PTR [rip+0x20324a]        # 204008 <__dso_handle>
     dbe:	e8 0d ff ff ff       	call   cd0 <__cxa_finalize@plt>
     dc3:	e8 48 ff ff ff       	call   d10 <deregister_tm_clones>
     dc8:	c6 05 61 33 20 00 01 	mov    BYTE PTR [rip+0x203361],0x1        # 204130 <completed.7698>
     dcf:	5d                   	pop    rbp
     dd0:	c3                   	ret    
     dd1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
     dd8:	f3 c3                	repz ret 
     dda:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000000de0 <frame_dummy>:
     de0:	55                   	push   rbp
     de1:	48 89 e5             	mov    rbp,rsp
     de4:	5d                   	pop    rbp
     de5:	e9 66 ff ff ff       	jmp    d50 <register_tm_clones>

0000000000000dea <int_to_str[abi:cxx11](int)>:
    std::vector<T> my_vec;

};

std::string int_to_str(const int i)
{
     dea:	55                   	push   rbp
     deb:	48 89 e5             	mov    rbp,rsp
     dee:	53                   	push   rbx
     def:	48 83 ec 28          	sub    rsp,0x28
     df3:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
     df7:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
     dfa:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
     e01:	00 00 
     e03:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
     e07:	31 c0                	xor    eax,eax
  switch(i)
     e09:	83 7d d4 09          	cmp    DWORD PTR [rbp-0x2c],0x9
     e0d:	0f 87 2c 02 00 00    	ja     103f <int_to_str[abi:cxx11](int)+0x255>
     e13:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
     e16:	48 8d 14 85 00 00 00 	lea    rdx,[rax*4+0x0]
     e1d:	00 
     e1e:	48 8d 05 6f 15 00 00 	lea    rax,[rip+0x156f]        # 2394 <std::piecewise_construct+0x60>
     e25:	8b 04 02             	mov    eax,DWORD PTR [rdx+rax*1]
     e28:	48 63 d0             	movsxd rdx,eax
     e2b:	48 8d 05 62 15 00 00 	lea    rax,[rip+0x1562]        # 2394 <std::piecewise_construct+0x60>
     e32:	48 01 d0             	add    rax,rdx
     e35:	ff e0                	jmp    rax
  {
    case 0:
      return "zero";
     e37:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     e3b:	48 89 c7             	mov    rdi,rax
     e3e:	e8 7d fe ff ff       	call   cc0 <std::allocator<char>::allocator()@plt>
     e43:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
     e47:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     e4b:	48 8d 35 e3 14 00 00 	lea    rsi,[rip+0x14e3]        # 2335 <std::piecewise_construct+0x1>
     e52:	48 89 c7             	mov    rdi,rax
     e55:	e8 26 fe ff ff       	call   c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
     e5a:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     e5e:	48 89 c7             	mov    rdi,rax
     e61:	e8 ea fd ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
     e66:	e9 26 03 00 00       	jmp    1191 <int_to_str[abi:cxx11](int)+0x3a7>
    case 1:
      return "one";
     e6b:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     e6f:	48 89 c7             	mov    rdi,rax
     e72:	e8 49 fe ff ff       	call   cc0 <std::allocator<char>::allocator()@plt>
     e77:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
     e7b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     e7f:	48 8d 35 b4 14 00 00 	lea    rsi,[rip+0x14b4]        # 233a <std::piecewise_construct+0x6>
     e86:	48 89 c7             	mov    rdi,rax
     e89:	e8 f2 fd ff ff       	call   c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
     e8e:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     e92:	48 89 c7             	mov    rdi,rax
     e95:	e8 b6 fd ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
     e9a:	e9 f2 02 00 00       	jmp    1191 <int_to_str[abi:cxx11](int)+0x3a7>
    case 2:
      return "three";
     e9f:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     ea3:	48 89 c7             	mov    rdi,rax
     ea6:	e8 15 fe ff ff       	call   cc0 <std::allocator<char>::allocator()@plt>
     eab:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
     eaf:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     eb3:	48 8d 35 84 14 00 00 	lea    rsi,[rip+0x1484]        # 233e <std::piecewise_construct+0xa>
     eba:	48 89 c7             	mov    rdi,rax
     ebd:	e8 be fd ff ff       	call   c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
     ec2:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     ec6:	48 89 c7             	mov    rdi,rax
     ec9:	e8 82 fd ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
     ece:	e9 be 02 00 00       	jmp    1191 <int_to_str[abi:cxx11](int)+0x3a7>
    case 3:
      return "tres";
     ed3:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     ed7:	48 89 c7             	mov    rdi,rax
     eda:	e8 e1 fd ff ff       	call   cc0 <std::allocator<char>::allocator()@plt>
     edf:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
     ee3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     ee7:	48 8d 35 56 14 00 00 	lea    rsi,[rip+0x1456]        # 2344 <std::piecewise_construct+0x10>
     eee:	48 89 c7             	mov    rdi,rax
     ef1:	e8 8a fd ff ff       	call   c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
     ef6:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     efa:	48 89 c7             	mov    rdi,rax
     efd:	e8 4e fd ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
     f02:	e9 8a 02 00 00       	jmp    1191 <int_to_str[abi:cxx11](int)+0x3a7>
    case 4:
      return "fahr";
     f07:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     f0b:	48 89 c7             	mov    rdi,rax
     f0e:	e8 ad fd ff ff       	call   cc0 <std::allocator<char>::allocator()@plt>
     f13:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
     f17:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     f1b:	48 8d 35 27 14 00 00 	lea    rsi,[rip+0x1427]        # 2349 <std::piecewise_construct+0x15>
     f22:	48 89 c7             	mov    rdi,rax
     f25:	e8 56 fd ff ff       	call   c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
     f2a:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     f2e:	48 89 c7             	mov    rdi,rax
     f31:	e8 1a fd ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
     f36:	e9 56 02 00 00       	jmp    1191 <int_to_str[abi:cxx11](int)+0x3a7>
    case 5:
      return "funf";
     f3b:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     f3f:	48 89 c7             	mov    rdi,rax
     f42:	e8 79 fd ff ff       	call   cc0 <std::allocator<char>::allocator()@plt>
     f47:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
     f4b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     f4f:	48 8d 35 f8 13 00 00 	lea    rsi,[rip+0x13f8]        # 234e <std::piecewise_construct+0x1a>
     f56:	48 89 c7             	mov    rdi,rax
     f59:	e8 22 fd ff ff       	call   c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
     f5e:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     f62:	48 89 c7             	mov    rdi,rax
     f65:	e8 e6 fc ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
     f6a:	e9 22 02 00 00       	jmp    1191 <int_to_str[abi:cxx11](int)+0x3a7>
    case 6:
      return "[censored]";
     f6f:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     f73:	48 89 c7             	mov    rdi,rax
     f76:	e8 45 fd ff ff       	call   cc0 <std::allocator<char>::allocator()@plt>
     f7b:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
     f7f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     f83:	48 8d 35 c9 13 00 00 	lea    rsi,[rip+0x13c9]        # 2353 <std::piecewise_construct+0x1f>
     f8a:	48 89 c7             	mov    rdi,rax
     f8d:	e8 ee fc ff ff       	call   c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
     f92:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     f96:	48 89 c7             	mov    rdi,rax
     f99:	e8 b2 fc ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
     f9e:	e9 ee 01 00 00       	jmp    1191 <int_to_str[abi:cxx11](int)+0x3a7>
    case 7:
      return "the best number";
     fa3:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     fa7:	48 89 c7             	mov    rdi,rax
     faa:	e8 11 fd ff ff       	call   cc0 <std::allocator<char>::allocator()@plt>
     faf:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
     fb3:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     fb7:	48 8d 35 a0 13 00 00 	lea    rsi,[rip+0x13a0]        # 235e <std::piecewise_construct+0x2a>
     fbe:	48 89 c7             	mov    rdi,rax
     fc1:	e8 ba fc ff ff       	call   c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
     fc6:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     fca:	48 89 c7             	mov    rdi,rax
     fcd:	e8 7e fc ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
     fd2:	e9 ba 01 00 00       	jmp    1191 <int_to_str[abi:cxx11](int)+0x3a7>
    case 8:
      return "actually, infinity";
     fd7:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     fdb:	48 89 c7             	mov    rdi,rax
     fde:	e8 dd fc ff ff       	call   cc0 <std::allocator<char>::allocator()@plt>
     fe3:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
     fe7:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
     feb:	48 8d 35 7c 13 00 00 	lea    rsi,[rip+0x137c]        # 236e <std::piecewise_construct+0x3a>
     ff2:	48 89 c7             	mov    rdi,rax
     ff5:	e8 86 fc ff ff       	call   c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
     ffa:	48 8d 45 e7          	lea    rax,[rbp-0x19]
     ffe:	48 89 c7             	mov    rdi,rax
    1001:	e8 4a fc ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    1006:	e9 86 01 00 00       	jmp    1191 <int_to_str[abi:cxx11](int)+0x3a7>
    case 9:
      return "none";
    100b:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    100f:	48 89 c7             	mov    rdi,rax
    1012:	e8 a9 fc ff ff       	call   cc0 <std::allocator<char>::allocator()@plt>
    1017:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
    101b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    101f:	48 8d 35 5b 13 00 00 	lea    rsi,[rip+0x135b]        # 2381 <std::piecewise_construct+0x4d>
    1026:	48 89 c7             	mov    rdi,rax
    1029:	e8 52 fc ff ff       	call   c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
    102e:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    1032:	48 89 c7             	mov    rdi,rax
    1035:	e8 16 fc ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    103a:	e9 52 01 00 00       	jmp    1191 <int_to_str[abi:cxx11](int)+0x3a7>
    default:
      return "a big number";
    103f:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    1043:	48 89 c7             	mov    rdi,rax
    1046:	e8 75 fc ff ff       	call   cc0 <std::allocator<char>::allocator()@plt>
    104b:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
    104f:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1053:	48 8d 35 2c 13 00 00 	lea    rsi,[rip+0x132c]        # 2386 <std::piecewise_construct+0x52>
    105a:	48 89 c7             	mov    rdi,rax
    105d:	e8 1e fc ff ff       	call   c80 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string(char const*, std::allocator<char> const&)@plt>
    1062:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    1066:	48 89 c7             	mov    rdi,rax
    1069:	e8 e2 fb ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    106e:	e9 1e 01 00 00       	jmp    1191 <int_to_str[abi:cxx11](int)+0x3a7>
    1073:	48 89 c3             	mov    rbx,rax
      return "zero";
    1076:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    107a:	48 89 c7             	mov    rdi,rax
    107d:	e8 ce fb ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    1082:	48 89 d8             	mov    rax,rbx
    1085:	48 89 c7             	mov    rdi,rax
    1088:	e8 23 fc ff ff       	call   cb0 <_Unwind_Resume@plt>
    108d:	48 89 c3             	mov    rbx,rax
      return "one";
    1090:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    1094:	48 89 c7             	mov    rdi,rax
    1097:	e8 b4 fb ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    109c:	48 89 d8             	mov    rax,rbx
    109f:	48 89 c7             	mov    rdi,rax
    10a2:	e8 09 fc ff ff       	call   cb0 <_Unwind_Resume@plt>
    10a7:	48 89 c3             	mov    rbx,rax
      return "three";
    10aa:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    10ae:	48 89 c7             	mov    rdi,rax
    10b1:	e8 9a fb ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    10b6:	48 89 d8             	mov    rax,rbx
    10b9:	48 89 c7             	mov    rdi,rax
    10bc:	e8 ef fb ff ff       	call   cb0 <_Unwind_Resume@plt>
    10c1:	48 89 c3             	mov    rbx,rax
      return "tres";
    10c4:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    10c8:	48 89 c7             	mov    rdi,rax
    10cb:	e8 80 fb ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    10d0:	48 89 d8             	mov    rax,rbx
    10d3:	48 89 c7             	mov    rdi,rax
    10d6:	e8 d5 fb ff ff       	call   cb0 <_Unwind_Resume@plt>
    10db:	48 89 c3             	mov    rbx,rax
      return "fahr";
    10de:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    10e2:	48 89 c7             	mov    rdi,rax
    10e5:	e8 66 fb ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    10ea:	48 89 d8             	mov    rax,rbx
    10ed:	48 89 c7             	mov    rdi,rax
    10f0:	e8 bb fb ff ff       	call   cb0 <_Unwind_Resume@plt>
    10f5:	48 89 c3             	mov    rbx,rax
      return "funf";
    10f8:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    10fc:	48 89 c7             	mov    rdi,rax
    10ff:	e8 4c fb ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    1104:	48 89 d8             	mov    rax,rbx
    1107:	48 89 c7             	mov    rdi,rax
    110a:	e8 a1 fb ff ff       	call   cb0 <_Unwind_Resume@plt>
    110f:	48 89 c3             	mov    rbx,rax
      return "[censored]";
    1112:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    1116:	48 89 c7             	mov    rdi,rax
    1119:	e8 32 fb ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    111e:	48 89 d8             	mov    rax,rbx
    1121:	48 89 c7             	mov    rdi,rax
    1124:	e8 87 fb ff ff       	call   cb0 <_Unwind_Resume@plt>
    1129:	48 89 c3             	mov    rbx,rax
      return "the best number";
    112c:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    1130:	48 89 c7             	mov    rdi,rax
    1133:	e8 18 fb ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    1138:	48 89 d8             	mov    rax,rbx
    113b:	48 89 c7             	mov    rdi,rax
    113e:	e8 6d fb ff ff       	call   cb0 <_Unwind_Resume@plt>
    1143:	48 89 c3             	mov    rbx,rax
      return "actually, infinity";
    1146:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    114a:	48 89 c7             	mov    rdi,rax
    114d:	e8 fe fa ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    1152:	48 89 d8             	mov    rax,rbx
    1155:	48 89 c7             	mov    rdi,rax
    1158:	e8 53 fb ff ff       	call   cb0 <_Unwind_Resume@plt>
    115d:	48 89 c3             	mov    rbx,rax
      return "none";
    1160:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    1164:	48 89 c7             	mov    rdi,rax
    1167:	e8 e4 fa ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    116c:	48 89 d8             	mov    rax,rbx
    116f:	48 89 c7             	mov    rdi,rax
    1172:	e8 39 fb ff ff       	call   cb0 <_Unwind_Resume@plt>
    1177:	48 89 c3             	mov    rbx,rax
      return "a big number";
    117a:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    117e:	48 89 c7             	mov    rdi,rax
    1181:	e8 ca fa ff ff       	call   c50 <std::allocator<char>::~allocator()@plt>
    1186:	48 89 d8             	mov    rax,rbx
    1189:	48 89 c7             	mov    rdi,rax
    118c:	e8 1f fb ff ff       	call   cb0 <_Unwind_Resume@plt>
  }
}
    1191:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    1195:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    1199:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
    11a0:	00 00 
    11a2:	74 05                	je     11a9 <int_to_str[abi:cxx11](int)+0x3bf>
    11a4:	e8 b7 fa ff ff       	call   c60 <__stack_chk_fail@plt>
    11a9:	48 83 c4 28          	add    rsp,0x28
    11ad:	5b                   	pop    rbx
    11ae:	5d                   	pop    rbp
    11af:	c3                   	ret    

00000000000011b0 <main::{lambda(int)#1}::operator()(int) const>:

  for(int i = 0; i < 5; i++)
    ints[i] = i;

  // EXAMPLE #1
  auto doubles = ints.map([] (int i)  { return i * 2; });
    11b0:	55                   	push   rbp
    11b1:	48 89 e5             	mov    rbp,rsp
    11b4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    11b8:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    11bb:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
    11be:	01 c0                	add    eax,eax
    11c0:	5d                   	pop    rbp
    11c1:	c3                   	ret    

00000000000011c2 <main>:
{
    11c2:	55                   	push   rbp
    11c3:	48 89 e5             	mov    rbp,rsp
    11c6:	53                   	push   rbx
    11c7:	48 83 ec 78          	sub    rsp,0x78
    11cb:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    11d2:	00 00 
    11d4:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    11d8:	31 c0                	xor    eax,eax
  Vector<int> ints(5);
    11da:	48 8d 45 90          	lea    rax,[rbp-0x70]
    11de:	be 05 00 00 00       	mov    esi,0x5
    11e3:	48 89 c7             	mov    rdi,rax
    11e6:	e8 8f 02 00 00       	call   147a <Vector<int>::Vector(unsigned int)>
  for(int i = 0; i < 5; i++)
    11eb:	c7 45 88 00 00 00 00 	mov    DWORD PTR [rbp-0x78],0x0
    11f2:	83 7d 88 04          	cmp    DWORD PTR [rbp-0x78],0x4
    11f6:	7f 1f                	jg     1217 <main+0x55>
    ints[i] = i;
    11f8:	8b 55 88             	mov    edx,DWORD PTR [rbp-0x78]
    11fb:	48 8d 45 90          	lea    rax,[rbp-0x70]
    11ff:	89 d6                	mov    esi,edx
    1201:	48 89 c7             	mov    rdi,rax
    1204:	e8 3b 03 00 00       	call   1544 <Vector<int>::operator[](unsigned int)>
    1209:	48 89 c2             	mov    rdx,rax
    120c:	8b 45 88             	mov    eax,DWORD PTR [rbp-0x78]
    120f:	89 02                	mov    DWORD PTR [rdx],eax
  for(int i = 0; i < 5; i++)
    1211:	83 45 88 01          	add    DWORD PTR [rbp-0x78],0x1
    1215:	eb db                	jmp    11f2 <main+0x30>
  auto doubles = ints.map([] (int i)  { return i * 2; });
    1217:	48 8d 45 b0          	lea    rax,[rbp-0x50]
    121b:	48 8d 55 90          	lea    rdx,[rbp-0x70]
    121f:	48 83 ec 08          	sub    rsp,0x8
    1223:	53                   	push   rbx
    1224:	48 89 d6             	mov    rsi,rdx
    1227:	48 89 c7             	mov    rdi,rax
    122a:	e8 e9 00 00 00       	call   1318 <Vector<std::result_of<main::{lambda(int)#1} (int)>::type> Vector<int>::map<main::{lambda(int)#1}>(std::result_of) const>
    122f:	48 83 c4 10          	add    rsp,0x10

  // EXAMPLE #2
  auto words = doubles.map(int_to_str);
    1233:	48 8d 45 d0          	lea    rax,[rbp-0x30]
    1237:	48 8d 4d b0          	lea    rcx,[rbp-0x50]
    123b:	48 8d 15 a8 fb ff ff 	lea    rdx,[rip+0xfffffffffffffba8]        # dea <int_to_str[abi:cxx11](int)>
    1242:	48 89 ce             	mov    rsi,rcx
    1245:	48 89 c7             	mov    rdi,rax
    1248:	e8 1b 03 00 00       	call   1568 <Vector<std::result_of<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*(int))(int)>::type> Vector<int>::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*)(int)>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*)(int)) const>

  for(int i = 0; i < 5; i++)
    124d:	c7 45 8c 00 00 00 00 	mov    DWORD PTR [rbp-0x74],0x0
    1254:	83 7d 8c 04          	cmp    DWORD PTR [rbp-0x74],0x4
    1258:	7f 3b                	jg     1295 <main+0xd3>
    std::cout << words[i] << std::endl;
    125a:	8b 55 8c             	mov    edx,DWORD PTR [rbp-0x74]
    125d:	48 8d 45 d0          	lea    rax,[rbp-0x30]
    1261:	89 d6                	mov    esi,edx
    1263:	48 89 c7             	mov    rdi,rax
    1266:	e8 31 04 00 00       	call   169c <Vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator[](unsigned int)>
    126b:	48 89 c6             	mov    rsi,rax
    126e:	48 8d 3d ab 2d 20 00 	lea    rdi,[rip+0x202dab]        # 204020 <std::cout@@GLIBCXX_3.4>
    1275:	e8 96 f9 ff ff       	call   c10 <std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, std::allocator<char> >(std::basic_ostream<char, std::char_traits<char> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)@plt>
    127a:	48 89 c2             	mov    rdx,rax
    127d:	48 8b 05 4c 2d 20 00 	mov    rax,QWORD PTR [rip+0x202d4c]        # 203fd0 <std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&)@GLIBCXX_3.4>
    1284:	48 89 c6             	mov    rsi,rax
    1287:	48 89 d7             	mov    rdi,rdx
    128a:	e8 b1 f9 ff ff       	call   c40 <std::ostream::operator<<(std::ostream& (*)(std::ostream&))@plt>
  for(int i = 0; i < 5; i++)
    128f:	83 45 8c 01          	add    DWORD PTR [rbp-0x74],0x1
    1293:	eb bf                	jmp    1254 <main+0x92>

  return 0;
    1295:	bb 00 00 00 00       	mov    ebx,0x0
  auto words = doubles.map(int_to_str);
    129a:	48 8d 45 d0          	lea    rax,[rbp-0x30]
    129e:	48 89 c7             	mov    rdi,rax
    12a1:	e8 b8 01 00 00       	call   145e <Vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~Vector()>
  auto doubles = ints.map([] (int i)  { return i * 2; });
    12a6:	48 8d 45 b0          	lea    rax,[rbp-0x50]
    12aa:	48 89 c7             	mov    rdi,rax
    12ad:	e8 90 01 00 00       	call   1442 <Vector<int>::~Vector()>
  Vector<int> ints(5);
    12b2:	48 8d 45 90          	lea    rax,[rbp-0x70]
    12b6:	48 89 c7             	mov    rdi,rax
    12b9:	e8 84 01 00 00       	call   1442 <Vector<int>::~Vector()>
    12be:	89 d8                	mov    eax,ebx
}
    12c0:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    12c4:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
    12cb:	00 00 
    12cd:	74 43                	je     1312 <main+0x150>
    12cf:	eb 3c                	jmp    130d <main+0x14b>
    12d1:	48 89 c3             	mov    rbx,rax
  auto words = doubles.map(int_to_str);
    12d4:	48 8d 45 d0          	lea    rax,[rbp-0x30]
    12d8:	48 89 c7             	mov    rdi,rax
    12db:	e8 7e 01 00 00       	call   145e <Vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~Vector()>
    12e0:	eb 03                	jmp    12e5 <main+0x123>
    12e2:	48 89 c3             	mov    rbx,rax
  auto doubles = ints.map([] (int i)  { return i * 2; });
    12e5:	48 8d 45 b0          	lea    rax,[rbp-0x50]
    12e9:	48 89 c7             	mov    rdi,rax
    12ec:	e8 51 01 00 00       	call   1442 <Vector<int>::~Vector()>
    12f1:	eb 03                	jmp    12f6 <main+0x134>
    12f3:	48 89 c3             	mov    rbx,rax
  Vector<int> ints(5);
    12f6:	48 8d 45 90          	lea    rax,[rbp-0x70]
    12fa:	48 89 c7             	mov    rdi,rax
    12fd:	e8 40 01 00 00       	call   1442 <Vector<int>::~Vector()>
    1302:	48 89 d8             	mov    rax,rbx
    1305:	48 89 c7             	mov    rdi,rax
    1308:	e8 a3 f9 ff ff       	call   cb0 <_Unwind_Resume@plt>
}
    130d:	e8 4e f9 ff ff       	call   c60 <__stack_chk_fail@plt>
    1312:	48 8b 5d f8          	mov    rbx,QWORD PTR [rbp-0x8]
    1316:	c9                   	leave  
    1317:	c3                   	ret    

0000000000001318 <Vector<std::result_of<main::{lambda(int)#1} (int)>::type> Vector<int>::map<main::{lambda(int)#1}>(std::result_of) const>:
    Vector<Ret_t<Func>> map(Func f) const
    1318:	55                   	push   rbp
    1319:	48 89 e5             	mov    rbp,rsp
    131c:	41 54                	push   r12
    131e:	53                   	push   rbx
    131f:	48 83 ec 20          	sub    rsp,0x20
    1323:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    1327:	48 89 75 d0          	mov    QWORD PTR [rbp-0x30],rsi
    132b:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    1332:	00 00 
    1334:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    1338:	31 c0                	xor    eax,eax
      Vector<Ret_t<Func>> result(size());
    133a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    133e:	48 89 c7             	mov    rdi,rax
    1341:	e8 d8 04 00 00       	call   181e <Vector<int>::size() const>
    1346:	89 c2                	mov    edx,eax
    1348:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    134c:	89 d6                	mov    esi,edx
    134e:	48 89 c7             	mov    rdi,rax
    1351:	e8 24 01 00 00       	call   147a <Vector<int>::Vector(unsigned int)>
      for(unsigned int i = 0; i < size(); i++)
    1356:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [rbp-0x1c],0x0
    135d:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    1361:	48 89 c7             	mov    rdi,rax
    1364:	e8 b5 04 00 00       	call   181e <Vector<int>::size() const>
    1369:	39 45 e4             	cmp    DWORD PTR [rbp-0x1c],eax
    136c:	0f 92 c0             	setb   al
    136f:	84 c0                	test   al,al
    1371:	74 3d                	je     13b0 <Vector<std::result_of<main::{lambda(int)#1} (int)>::type> Vector<int>::map<main::{lambda(int)#1}>(std::result_of) const+0x98>
        result[i] = f(my_vec[i]);
    1373:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    1376:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
    137a:	48 89 d6             	mov    rsi,rdx
    137d:	48 89 c7             	mov    rdi,rax
    1380:	e8 b3 04 00 00       	call   1838 <std::vector<int, std::allocator<int> >::operator[](unsigned long) const>
    1385:	8b 18                	mov    ebx,DWORD PTR [rax]
    1387:	8b 55 e4             	mov    edx,DWORD PTR [rbp-0x1c]
    138a:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    138e:	89 d6                	mov    esi,edx
    1390:	48 89 c7             	mov    rdi,rax
    1393:	e8 ac 01 00 00       	call   1544 <Vector<int>::operator[](unsigned int)>
    1398:	49 89 c4             	mov    r12,rax
    139b:	89 de                	mov    esi,ebx
    139d:	48 8d 7d 10          	lea    rdi,[rbp+0x10]
    13a1:	e8 0a fe ff ff       	call   11b0 <main::{lambda(int)#1}::operator()(int) const>
    13a6:	41 89 04 24          	mov    DWORD PTR [r12],eax
      for(unsigned int i = 0; i < size(); i++)
    13aa:	83 45 e4 01          	add    DWORD PTR [rbp-0x1c],0x1
    13ae:	eb ad                	jmp    135d <Vector<std::result_of<main::{lambda(int)#1} (int)>::type> Vector<int>::map<main::{lambda(int)#1}>(std::result_of) const+0x45>
      return result;
    13b0:	90                   	nop
    }
    13b1:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    13b5:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    13b9:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
    13c0:	00 00 
    13c2:	74 05                	je     13c9 <Vector<std::result_of<main::{lambda(int)#1} (int)>::type> Vector<int>::map<main::{lambda(int)#1}>(std::result_of) const+0xb1>
    13c4:	e8 97 f8 ff ff       	call   c60 <__stack_chk_fail@plt>
    13c9:	48 83 c4 20          	add    rsp,0x20
    13cd:	5b                   	pop    rbx
    13ce:	41 5c                	pop    r12
    13d0:	5d                   	pop    rbp
    13d1:	c3                   	ret    

00000000000013d2 <__static_initialization_and_destruction_0(int, int)>:
}
    13d2:	55                   	push   rbp
    13d3:	48 89 e5             	mov    rbp,rsp
    13d6:	48 83 ec 10          	sub    rsp,0x10
    13da:	89 7d fc             	mov    DWORD PTR [rbp-0x4],edi
    13dd:	89 75 f8             	mov    DWORD PTR [rbp-0x8],esi
    13e0:	83 7d fc 01          	cmp    DWORD PTR [rbp-0x4],0x1
    13e4:	75 32                	jne    1418 <__static_initialization_and_destruction_0(int, int)+0x46>
    13e6:	81 7d f8 ff ff 00 00 	cmp    DWORD PTR [rbp-0x8],0xffff
    13ed:	75 29                	jne    1418 <__static_initialization_and_destruction_0(int, int)+0x46>
  extern wostream wclog;	/// Linked to standard error (buffered)
#endif
  //@}

  // For construction of filebuffers for cout, cin, cerr, clog et. al.
  static ios_base::Init __ioinit;
    13ef:	48 8d 3d 3b 2d 20 00 	lea    rdi,[rip+0x202d3b]        # 204131 <std::__ioinit>
    13f6:	e8 a5 f8 ff ff       	call   ca0 <std::ios_base::Init::Init()@plt>
    13fb:	48 8d 15 06 2c 20 00 	lea    rdx,[rip+0x202c06]        # 204008 <__dso_handle>
    1402:	48 8d 35 28 2d 20 00 	lea    rsi,[rip+0x202d28]        # 204131 <std::__ioinit>
    1409:	48 8b 05 e8 2b 20 00 	mov    rax,QWORD PTR [rip+0x202be8]        # 203ff8 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
    1410:	48 89 c7             	mov    rdi,rax
    1413:	e8 e8 f7 ff ff       	call   c00 <__cxa_atexit@plt>
    1418:	90                   	nop
    1419:	c9                   	leave  
    141a:	c3                   	ret    

000000000000141b <_GLOBAL__sub_I__Z10int_to_strB5cxx11i>:
    141b:	55                   	push   rbp
    141c:	48 89 e5             	mov    rbp,rsp
    141f:	be ff ff 00 00       	mov    esi,0xffff
    1424:	bf 01 00 00 00       	mov    edi,0x1
    1429:	e8 a4 ff ff ff       	call   13d2 <__static_initialization_and_destruction_0(int, int)>
    142e:	5d                   	pop    rbp
    142f:	c3                   	ret    

0000000000001430 <operator new(unsigned long, void*)>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
    1430:	55                   	push   rbp
    1431:	48 89 e5             	mov    rbp,rsp
    1434:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1438:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    143c:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1440:	5d                   	pop    rbp
    1441:	c3                   	ret    

0000000000001442 <Vector<int>::~Vector()>:
class Vector
    1442:	55                   	push   rbp
    1443:	48 89 e5             	mov    rbp,rsp
    1446:	48 83 ec 10          	sub    rsp,0x10
    144a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    144e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1452:	48 89 c7             	mov    rdi,rax
    1455:	e8 a6 00 00 00       	call   1500 <std::vector<int, std::allocator<int> >::~vector()>
    145a:	90                   	nop
    145b:	c9                   	leave  
    145c:	c3                   	ret    
    145d:	90                   	nop

000000000000145e <Vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~Vector()>:
    145e:	55                   	push   rbp
    145f:	48 89 e5             	mov    rbp,rsp
    1462:	48 83 ec 10          	sub    rsp,0x10
    1466:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    146a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    146e:	48 89 c7             	mov    rdi,rax
    1471:	e8 e2 01 00 00       	call   1658 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>
    1476:	90                   	nop
    1477:	c9                   	leave  
    1478:	c3                   	ret    
    1479:	90                   	nop

000000000000147a <Vector<int>::Vector(unsigned int)>:
    Vector(const unsigned int size) : my_vec(size) {}
    147a:	55                   	push   rbp
    147b:	48 89 e5             	mov    rbp,rsp
    147e:	53                   	push   rbx
    147f:	48 83 ec 28          	sub    rsp,0x28
    1483:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    1487:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
    148a:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    1491:	00 00 
    1493:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    1497:	31 c0                	xor    eax,eax
    1499:	48 8b 5d d8          	mov    rbx,QWORD PTR [rbp-0x28]
    149d:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    14a1:	48 89 c7             	mov    rdi,rax
    14a4:	e8 17 02 00 00       	call   16c0 <std::allocator<int>::allocator()>
    14a9:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    14ac:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
    14b0:	48 89 c6             	mov    rsi,rax
    14b3:	48 89 df             	mov    rdi,rbx
    14b6:	e8 3d 02 00 00       	call   16f8 <std::vector<int, std::allocator<int> >::vector(unsigned long, std::allocator<int> const&)>
    14bb:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    14bf:	48 89 c7             	mov    rdi,rax
    14c2:	e8 15 02 00 00       	call   16dc <std::allocator<int>::~allocator()>
    14c7:	90                   	nop
    14c8:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    14cc:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
    14d3:	00 00 
    14d5:	74 21                	je     14f8 <Vector<int>::Vector(unsigned int)+0x7e>
    14d7:	eb 1a                	jmp    14f3 <Vector<int>::Vector(unsigned int)+0x79>
    14d9:	48 89 c3             	mov    rbx,rax
    14dc:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    14e0:	48 89 c7             	mov    rdi,rax
    14e3:	e8 f4 01 00 00       	call   16dc <std::allocator<int>::~allocator()>
    14e8:	48 89 d8             	mov    rax,rbx
    14eb:	48 89 c7             	mov    rdi,rax
    14ee:	e8 bd f7 ff ff       	call   cb0 <_Unwind_Resume@plt>
    14f3:	e8 68 f7 ff ff       	call   c60 <__stack_chk_fail@plt>
    14f8:	48 83 c4 28          	add    rsp,0x28
    14fc:	5b                   	pop    rbx
    14fd:	5d                   	pop    rbp
    14fe:	c3                   	ret    
    14ff:	90                   	nop

0000000000001500 <std::vector<int, std::allocator<int> >::~vector()>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
    1500:	55                   	push   rbp
    1501:	48 89 e5             	mov    rbp,rsp
    1504:	48 83 ec 10          	sub    rsp,0x10
    1508:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
    150c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1510:	48 89 c7             	mov    rdi,rax
    1513:	e8 ae 02 00 00       	call   17c6 <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    1518:	48 89 c2             	mov    rdx,rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    151b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    151f:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
    1523:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1527:	48 8b 00             	mov    rax,QWORD PTR [rax]
    152a:	48 89 ce             	mov    rsi,rcx
    152d:	48 89 c7             	mov    rdi,rax
    1530:	e8 9f 02 00 00       	call   17d4 <void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)>
		      _M_get_Tp_allocator()); }
    1535:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1539:	48 89 c7             	mov    rdi,rax
    153c:	e8 35 02 00 00       	call   1776 <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>
    1541:	90                   	nop
    1542:	c9                   	leave  
    1543:	c3                   	ret    

0000000000001544 <Vector<int>::operator[](unsigned int)>:
    T& operator[](const unsigned int idx) { return my_vec[idx]; }
    1544:	55                   	push   rbp
    1545:	48 89 e5             	mov    rbp,rsp
    1548:	48 83 ec 10          	sub    rsp,0x10
    154c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1550:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    1553:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    1556:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    155a:	48 89 d6             	mov    rsi,rdx
    155d:	48 89 c7             	mov    rdi,rax
    1560:	e8 99 02 00 00       	call   17fe <std::vector<int, std::allocator<int> >::operator[](unsigned long)>
    1565:	c9                   	leave  
    1566:	c3                   	ret    
    1567:	90                   	nop

0000000000001568 <Vector<std::result_of<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*(int))(int)>::type> Vector<int>::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*)(int)>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*)(int)) const>:
    Vector<Ret_t<Func>> map(Func f) const
    1568:	55                   	push   rbp
    1569:	48 89 e5             	mov    rbp,rsp
    156c:	53                   	push   rbx
    156d:	48 83 ec 68          	sub    rsp,0x68
    1571:	48 89 7d a8          	mov    QWORD PTR [rbp-0x58],rdi
    1575:	48 89 75 a0          	mov    QWORD PTR [rbp-0x60],rsi
    1579:	48 89 55 98          	mov    QWORD PTR [rbp-0x68],rdx
    157d:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    1584:	00 00 
    1586:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    158a:	31 c0                	xor    eax,eax
      Vector<Ret_t<Func>> result(size());
    158c:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
    1590:	48 89 c7             	mov    rdi,rax
    1593:	e8 86 02 00 00       	call   181e <Vector<int>::size() const>
    1598:	89 c2                	mov    edx,eax
    159a:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    159e:	89 d6                	mov    esi,edx
    15a0:	48 89 c7             	mov    rdi,rax
    15a3:	e8 b0 02 00 00       	call   1858 <Vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::Vector(unsigned int)>
      for(unsigned int i = 0; i < size(); i++)
    15a8:	c7 45 bc 00 00 00 00 	mov    DWORD PTR [rbp-0x44],0x0
    15af:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
    15b3:	48 89 c7             	mov    rdi,rax
    15b6:	e8 63 02 00 00       	call   181e <Vector<int>::size() const>
    15bb:	39 45 bc             	cmp    DWORD PTR [rbp-0x44],eax
    15be:	0f 92 c0             	setb   al
    15c1:	84 c0                	test   al,al
    15c3:	74 72                	je     1637 <Vector<std::result_of<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*(int))(int)>::type> Vector<int>::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*)(int)>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*)(int)) const+0xcf>
        result[i] = f(my_vec[i]);
    15c5:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
    15c8:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
    15cc:	48 89 d6             	mov    rsi,rdx
    15cf:	48 89 c7             	mov    rdi,rax
    15d2:	e8 61 02 00 00       	call   1838 <std::vector<int, std::allocator<int> >::operator[](unsigned long) const>
    15d7:	8b 08                	mov    ecx,DWORD PTR [rax]
    15d9:	48 8d 55 c0          	lea    rdx,[rbp-0x40]
    15dd:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
    15e1:	89 ce                	mov    esi,ecx
    15e3:	48 89 d7             	mov    rdi,rdx
    15e6:	ff d0                	call   rax
    15e8:	8b 55 bc             	mov    edx,DWORD PTR [rbp-0x44]
    15eb:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    15ef:	89 d6                	mov    esi,edx
    15f1:	48 89 c7             	mov    rdi,rax
    15f4:	e8 a3 00 00 00       	call   169c <Vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator[](unsigned int)>
    15f9:	48 89 c2             	mov    rdx,rax
    15fc:	48 8d 45 c0          	lea    rax,[rbp-0x40]
    1600:	48 89 c6             	mov    rsi,rax
    1603:	48 89 d7             	mov    rdi,rdx
    1606:	e8 65 f6 ff ff       	call   c70 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&)@plt>
    160b:	48 8d 45 c0          	lea    rax,[rbp-0x40]
    160f:	48 89 c7             	mov    rdi,rax
    1612:	e8 d9 f5 ff ff       	call   bf0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
      for(unsigned int i = 0; i < size(); i++)
    1617:	83 45 bc 01          	add    DWORD PTR [rbp-0x44],0x1
    161b:	eb 92                	jmp    15af <Vector<std::result_of<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*(int))(int)>::type> Vector<int>::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*)(int)>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*)(int)) const+0x47>
    161d:	48 89 c3             	mov    rbx,rax
    1620:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    1624:	48 89 c7             	mov    rdi,rax
    1627:	e8 32 fe ff ff       	call   145e <Vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~Vector()>
    162c:	48 89 d8             	mov    rax,rbx
    162f:	48 89 c7             	mov    rdi,rax
    1632:	e8 79 f6 ff ff       	call   cb0 <_Unwind_Resume@plt>
      return result;
    1637:	90                   	nop
    }
    1638:	48 8b 45 a8          	mov    rax,QWORD PTR [rbp-0x58]
    163c:	48 8b 4d e8          	mov    rcx,QWORD PTR [rbp-0x18]
    1640:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
    1647:	00 00 
    1649:	74 05                	je     1650 <Vector<std::result_of<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*(int))(int)>::type> Vector<int>::map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*)(int)>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > (*)(int)) const+0xe8>
    164b:	e8 10 f6 ff ff       	call   c60 <__stack_chk_fail@plt>
    1650:	48 83 c4 68          	add    rsp,0x68
    1654:	5b                   	pop    rbx
    1655:	5d                   	pop    rbp
    1656:	c3                   	ret    
    1657:	90                   	nop

0000000000001658 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~vector()>:
      ~vector() _GLIBCXX_NOEXCEPT
    1658:	55                   	push   rbp
    1659:	48 89 e5             	mov    rbp,rsp
    165c:	48 83 ec 10          	sub    rsp,0x10
    1660:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
		      _M_get_Tp_allocator()); }
    1664:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1668:	48 89 c7             	mov    rdi,rax
    166b:	e8 da 02 00 00       	call   194a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
    1670:	48 89 c2             	mov    rdx,rax
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
    1673:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1677:	48 8b 48 08          	mov    rcx,QWORD PTR [rax+0x8]
    167b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    167f:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1682:	48 89 ce             	mov    rsi,rcx
    1685:	48 89 c7             	mov    rdi,rax
    1688:	e8 cb 02 00 00       	call   1958 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
		      _M_get_Tp_allocator()); }
    168d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1691:	48 89 c7             	mov    rdi,rax
    1694:	e8 61 02 00 00       	call   18fa <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~_Vector_base()>
    1699:	90                   	nop
    169a:	c9                   	leave  
    169b:	c3                   	ret    

000000000000169c <Vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::operator[](unsigned int)>:
    T& operator[](const unsigned int idx) { return my_vec[idx]; }
    169c:	55                   	push   rbp
    169d:	48 89 e5             	mov    rbp,rsp
    16a0:	48 83 ec 10          	sub    rsp,0x10
    16a4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    16a8:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
    16ab:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    16ae:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    16b2:	48 89 d6             	mov    rsi,rdx
    16b5:	48 89 c7             	mov    rdi,rax
    16b8:	e8 c5 02 00 00       	call   1982 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>
    16bd:	c9                   	leave  
    16be:	c3                   	ret    
    16bf:	90                   	nop

00000000000016c0 <std::allocator<int>::allocator()>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
    16c0:	55                   	push   rbp
    16c1:	48 89 e5             	mov    rbp,rsp
    16c4:	48 83 ec 10          	sub    rsp,0x10
    16c8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    16cc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    16d0:	48 89 c7             	mov    rdi,rax
    16d3:	e8 ca 02 00 00       	call   19a2 <__gnu_cxx::new_allocator<int>::new_allocator()>
    16d8:	90                   	nop
    16d9:	c9                   	leave  
    16da:	c3                   	ret    
    16db:	90                   	nop

00000000000016dc <std::allocator<int>::~allocator()>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
	allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
    16dc:	55                   	push   rbp
    16dd:	48 89 e5             	mov    rbp,rsp
    16e0:	48 83 ec 10          	sub    rsp,0x10
    16e4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    16e8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    16ec:	48 89 c7             	mov    rdi,rax
    16ef:	e8 ba 02 00 00       	call   19ae <__gnu_cxx::new_allocator<int>::~new_allocator()>
    16f4:	90                   	nop
    16f5:	c9                   	leave  
    16f6:	c3                   	ret    
    16f7:	90                   	nop

00000000000016f8 <std::vector<int, std::allocator<int> >::vector(unsigned long, std::allocator<int> const&)>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    16f8:	55                   	push   rbp
    16f9:	48 89 e5             	mov    rbp,rsp
    16fc:	53                   	push   rbx
    16fd:	48 83 ec 28          	sub    rsp,0x28
    1701:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    1705:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    1709:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
      : _Base(__n, __a)
    170d:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1711:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    1715:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
    1719:	48 89 ce             	mov    rsi,rcx
    171c:	48 89 c7             	mov    rdi,rax
    171f:	e8 96 02 00 00       	call   19ba <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&)>
      { _M_default_initialize(__n); }
    1724:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    1728:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    172c:	48 89 d6             	mov    rsi,rdx
    172f:	48 89 c7             	mov    rdi,rax
    1732:	e8 e1 02 00 00       	call   1a18 <std::vector<int, std::allocator<int> >::_M_default_initialize(unsigned long)>
    1737:	eb 1a                	jmp    1753 <std::vector<int, std::allocator<int> >::vector(unsigned long, std::allocator<int> const&)+0x5b>
    1739:	48 89 c3             	mov    rbx,rax
      : _Base(__n, __a)
    173c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1740:	48 89 c7             	mov    rdi,rax
    1743:	e8 2e 00 00 00       	call   1776 <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>
    1748:	48 89 d8             	mov    rax,rbx
    174b:	48 89 c7             	mov    rdi,rax
    174e:	e8 5d f5 ff ff       	call   cb0 <_Unwind_Resume@plt>
      { _M_default_initialize(__n); }
    1753:	48 83 c4 28          	add    rsp,0x28
    1757:	5b                   	pop    rbx
    1758:	5d                   	pop    rbp
    1759:	c3                   	ret    

000000000000175a <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()>:
      struct _Vector_impl
    175a:	55                   	push   rbp
    175b:	48 89 e5             	mov    rbp,rsp
    175e:	48 83 ec 10          	sub    rsp,0x10
    1762:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1766:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    176a:	48 89 c7             	mov    rdi,rax
    176d:	e8 6a ff ff ff       	call   16dc <std::allocator<int>::~allocator()>
    1772:	90                   	nop
    1773:	c9                   	leave  
    1774:	c3                   	ret    
    1775:	90                   	nop

0000000000001776 <std::_Vector_base<int, std::allocator<int> >::~_Vector_base()>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    1776:	55                   	push   rbp
    1777:	48 89 e5             	mov    rbp,rsp
    177a:	48 83 ec 10          	sub    rsp,0x10
    177e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    1782:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1786:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
		      - this->_M_impl._M_start); }
    178a:	48 89 c2             	mov    rdx,rax
    178d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1791:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1794:	48 29 c2             	sub    rdx,rax
    1797:	48 89 d0             	mov    rax,rdx
    179a:	48 c1 f8 02          	sar    rax,0x2
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    179e:	48 89 c2             	mov    rdx,rax
    17a1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    17a5:	48 8b 08             	mov    rcx,QWORD PTR [rax]
    17a8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    17ac:	48 89 ce             	mov    rsi,rcx
    17af:	48 89 c7             	mov    rdi,rax
    17b2:	e8 a5 02 00 00       	call   1a5c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>
		      - this->_M_impl._M_start); }
    17b7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    17bb:	48 89 c7             	mov    rdi,rax
    17be:	e8 97 ff ff ff       	call   175a <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()>
    17c3:	90                   	nop
    17c4:	c9                   	leave  
    17c5:	c3                   	ret    

00000000000017c6 <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    17c6:	55                   	push   rbp
    17c7:	48 89 e5             	mov    rbp,rsp
    17ca:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
    17ce:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    17d2:	5d                   	pop    rbp
    17d3:	c3                   	ret    

00000000000017d4 <void std::_Destroy<int*, int>(int*, int*, std::allocator<int>&)>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    17d4:	55                   	push   rbp
    17d5:	48 89 e5             	mov    rbp,rsp
    17d8:	48 83 ec 20          	sub    rsp,0x20
    17dc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    17e0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    17e4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    17e8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    17ec:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    17f0:	48 89 d6             	mov    rsi,rdx
    17f3:	48 89 c7             	mov    rdi,rax
    17f6:	e8 96 02 00 00       	call   1a91 <void std::_Destroy<int*>(int*, int*)>
    }
    17fb:	90                   	nop
    17fc:	c9                   	leave  
    17fd:	c3                   	ret    

00000000000017fe <std::vector<int, std::allocator<int> >::operator[](unsigned long)>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
    17fe:	55                   	push   rbp
    17ff:	48 89 e5             	mov    rbp,rsp
    1802:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1806:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
    180a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    180e:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1811:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1815:	48 c1 e2 02          	shl    rdx,0x2
    1819:	48 01 d0             	add    rax,rdx
      }
    181c:	5d                   	pop    rbp
    181d:	c3                   	ret    

000000000000181e <Vector<int>::size() const>:
    unsigned int size() const { return my_vec.size(); }
    181e:	55                   	push   rbp
    181f:	48 89 e5             	mov    rbp,rsp
    1822:	48 83 ec 10          	sub    rsp,0x10
    1826:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    182a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    182e:	48 89 c7             	mov    rdi,rax
    1831:	e8 82 02 00 00       	call   1ab8 <std::vector<int, std::allocator<int> >::size() const>
    1836:	c9                   	leave  
    1837:	c3                   	ret    

0000000000001838 <std::vector<int, std::allocator<int> >::operator[](unsigned long) const>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      const_reference
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
    1838:	55                   	push   rbp
    1839:	48 89 e5             	mov    rbp,rsp
    183c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1840:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
    1844:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1848:	48 8b 00             	mov    rax,QWORD PTR [rax]
    184b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    184f:	48 c1 e2 02          	shl    rdx,0x2
    1853:	48 01 d0             	add    rax,rdx
      }
    1856:	5d                   	pop    rbp
    1857:	c3                   	ret    

0000000000001858 <Vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::Vector(unsigned int)>:
    Vector(const unsigned int size) : my_vec(size) {}
    1858:	55                   	push   rbp
    1859:	48 89 e5             	mov    rbp,rsp
    185c:	53                   	push   rbx
    185d:	48 83 ec 28          	sub    rsp,0x28
    1861:	48 89 7d d8          	mov    QWORD PTR [rbp-0x28],rdi
    1865:	89 75 d4             	mov    DWORD PTR [rbp-0x2c],esi
    1868:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    186f:	00 00 
    1871:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
    1875:	31 c0                	xor    eax,eax
    1877:	48 8b 5d d8          	mov    rbx,QWORD PTR [rbp-0x28]
    187b:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    187f:	48 89 c7             	mov    rdi,rax
    1882:	e8 57 02 00 00       	call   1ade <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocator()>
    1887:	8b 45 d4             	mov    eax,DWORD PTR [rbp-0x2c]
    188a:	48 8d 55 e7          	lea    rdx,[rbp-0x19]
    188e:	48 89 c6             	mov    rsi,rax
    1891:	48 89 df             	mov    rdi,rbx
    1894:	e8 7d 02 00 00       	call   1b16 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector(unsigned long, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>
    1899:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    189d:	48 89 c7             	mov    rdi,rax
    18a0:	e8 55 02 00 00       	call   1afa <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~allocator()>
    18a5:	90                   	nop
    18a6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    18aa:	64 48 33 04 25 28 00 	xor    rax,QWORD PTR fs:0x28
    18b1:	00 00 
    18b3:	74 21                	je     18d6 <Vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::Vector(unsigned int)+0x7e>
    18b5:	eb 1a                	jmp    18d1 <Vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::Vector(unsigned int)+0x79>
    18b7:	48 89 c3             	mov    rbx,rax
    18ba:	48 8d 45 e7          	lea    rax,[rbp-0x19]
    18be:	48 89 c7             	mov    rdi,rax
    18c1:	e8 34 02 00 00       	call   1afa <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~allocator()>
    18c6:	48 89 d8             	mov    rax,rbx
    18c9:	48 89 c7             	mov    rdi,rax
    18cc:	e8 df f3 ff ff       	call   cb0 <_Unwind_Resume@plt>
    18d1:	e8 8a f3 ff ff       	call   c60 <__stack_chk_fail@plt>
    18d6:	48 83 c4 28          	add    rsp,0x28
    18da:	5b                   	pop    rbx
    18db:	5d                   	pop    rbp
    18dc:	c3                   	ret    
    18dd:	90                   	nop

00000000000018de <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::~_Vector_impl()>:
      struct _Vector_impl
    18de:	55                   	push   rbp
    18df:	48 89 e5             	mov    rbp,rsp
    18e2:	48 83 ec 10          	sub    rsp,0x10
    18e6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    18ea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    18ee:	48 89 c7             	mov    rdi,rax
    18f1:	e8 04 02 00 00       	call   1afa <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~allocator()>
    18f6:	90                   	nop
    18f7:	c9                   	leave  
    18f8:	c3                   	ret    
    18f9:	90                   	nop

00000000000018fa <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~_Vector_base()>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
    18fa:	55                   	push   rbp
    18fb:	48 89 e5             	mov    rbp,rsp
    18fe:	48 83 ec 10          	sub    rsp,0x10
    1902:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    1906:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    190a:	48 8b 40 10          	mov    rax,QWORD PTR [rax+0x10]
		      - this->_M_impl._M_start); }
    190e:	48 89 c2             	mov    rdx,rax
    1911:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1915:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1918:	48 29 c2             	sub    rdx,rax
    191b:	48 89 d0             	mov    rax,rdx
    191e:	48 c1 f8 05          	sar    rax,0x5
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
    1922:	48 89 c2             	mov    rdx,rax
    1925:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1929:	48 8b 08             	mov    rcx,QWORD PTR [rax]
    192c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1930:	48 89 ce             	mov    rsi,rcx
    1933:	48 89 c7             	mov    rdi,rax
    1936:	e8 3d 02 00 00       	call   1b78 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
		      - this->_M_impl._M_start); }
    193b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    193f:	48 89 c7             	mov    rdi,rax
    1942:	e8 97 ff ff ff       	call   18de <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::~_Vector_impl()>
    1947:	90                   	nop
    1948:	c9                   	leave  
    1949:	c3                   	ret    

000000000000194a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
    194a:	55                   	push   rbp
    194b:	48 89 e5             	mov    rbp,rsp
    194e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
    1952:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1956:	5d                   	pop    rbp
    1957:	c3                   	ret    

0000000000001958 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    1958:	55                   	push   rbp
    1959:	48 89 e5             	mov    rbp,rsp
    195c:	48 83 ec 20          	sub    rsp,0x20
    1960:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1964:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    1968:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
      _Destroy(__first, __last);
    196c:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1970:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1974:	48 89 d6             	mov    rsi,rdx
    1977:	48 89 c7             	mov    rdi,rax
    197a:	e8 2e 02 00 00       	call   1bad <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
    }
    197f:	90                   	nop
    1980:	c9                   	leave  
    1981:	c3                   	ret    

0000000000001982 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::operator[](unsigned long)>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
    1982:	55                   	push   rbp
    1983:	48 89 e5             	mov    rbp,rsp
    1986:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    198a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	return *(this->_M_impl._M_start + __n);
    198e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1992:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1995:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1999:	48 c1 e2 05          	shl    rdx,0x5
    199d:	48 01 d0             	add    rax,rdx
      }
    19a0:	5d                   	pop    rbp
    19a1:	c3                   	ret    

00000000000019a2 <__gnu_cxx::new_allocator<int>::new_allocator()>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    19a2:	55                   	push   rbp
    19a3:	48 89 e5             	mov    rbp,rsp
    19a6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    19aa:	90                   	nop
    19ab:	5d                   	pop    rbp
    19ac:	c3                   	ret    
    19ad:	90                   	nop

00000000000019ae <__gnu_cxx::new_allocator<int>::~new_allocator()>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    19ae:	55                   	push   rbp
    19af:	48 89 e5             	mov    rbp,rsp
    19b2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    19b6:	90                   	nop
    19b7:	5d                   	pop    rbp
    19b8:	c3                   	ret    
    19b9:	90                   	nop

00000000000019ba <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&)>:
      _Vector_base(size_t __n, const allocator_type& __a)
    19ba:	55                   	push   rbp
    19bb:	48 89 e5             	mov    rbp,rsp
    19be:	53                   	push   rbx
    19bf:	48 83 ec 28          	sub    rsp,0x28
    19c3:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    19c7:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    19cb:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
      : _M_impl(__a)
    19cf:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    19d3:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    19d7:	48 89 d6             	mov    rsi,rdx
    19da:	48 89 c7             	mov    rdi,rax
    19dd:	e8 f2 01 00 00       	call   1bd4 <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&)>
      { _M_create_storage(__n); }
    19e2:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    19e6:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    19ea:	48 89 d6             	mov    rsi,rdx
    19ed:	48 89 c7             	mov    rdi,rax
    19f0:	e8 29 02 00 00       	call   1c1e <std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long)>
    19f5:	eb 1a                	jmp    1a11 <std::_Vector_base<int, std::allocator<int> >::_Vector_base(unsigned long, std::allocator<int> const&)+0x57>
    19f7:	48 89 c3             	mov    rbx,rax
      : _M_impl(__a)
    19fa:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    19fe:	48 89 c7             	mov    rdi,rax
    1a01:	e8 54 fd ff ff       	call   175a <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::~_Vector_impl()>
    1a06:	48 89 d8             	mov    rax,rbx
    1a09:	48 89 c7             	mov    rdi,rax
    1a0c:	e8 9f f2 ff ff       	call   cb0 <_Unwind_Resume@plt>
      { _M_create_storage(__n); }
    1a11:	48 83 c4 28          	add    rsp,0x28
    1a15:	5b                   	pop    rbx
    1a16:	5d                   	pop    rbp
    1a17:	c3                   	ret    

0000000000001a18 <std::vector<int, std::allocator<int> >::_M_default_initialize(unsigned long)>:
      }

#if __cplusplus >= 201103L
      // Called by the vector(n) constructor.
      void
      _M_default_initialize(size_type __n)
    1a18:	55                   	push   rbp
    1a19:	48 89 e5             	mov    rbp,rsp
    1a1c:	48 83 ec 10          	sub    rsp,0x10
    1a20:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1a24:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      {
	this->_M_impl._M_finish =
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
					   _M_get_Tp_allocator());
    1a28:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1a2c:	48 89 c7             	mov    rdi,rax
    1a2f:	e8 92 fd ff ff       	call   17c6 <std::_Vector_base<int, std::allocator<int> >::_M_get_Tp_allocator()>
    1a34:	48 89 c2             	mov    rdx,rax
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    1a37:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1a3b:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1a3e:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    1a42:	48 89 ce             	mov    rsi,rcx
    1a45:	48 89 c7             	mov    rdi,rax
    1a48:	e8 2a 02 00 00       	call   1c77 <int* std::__uninitialized_default_n_a<int*, unsigned long, int>(int*, unsigned long, std::allocator<int>&)>
    1a4d:	48 89 c2             	mov    rdx,rax
	this->_M_impl._M_finish =
    1a50:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1a54:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
      }
    1a58:	90                   	nop
    1a59:	c9                   	leave  
    1a5a:	c3                   	ret    
    1a5b:	90                   	nop

0000000000001a5c <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)>:
      _M_deallocate(pointer __p, size_t __n)
    1a5c:	55                   	push   rbp
    1a5d:	48 89 e5             	mov    rbp,rsp
    1a60:	48 83 ec 20          	sub    rsp,0x20
    1a64:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1a68:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    1a6c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	if (__p)
    1a70:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    1a75:	74 17                	je     1a8e <std::_Vector_base<int, std::allocator<int> >::_M_deallocate(int*, unsigned long)+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    1a77:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1a7b:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    1a7f:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    1a83:	48 89 ce             	mov    rsi,rcx
    1a86:	48 89 c7             	mov    rdi,rax
    1a89:	e8 12 02 00 00       	call   1ca0 <std::allocator_traits<std::allocator<int> >::deallocate(std::allocator<int>&, int*, unsigned long)>
      }
    1a8e:	90                   	nop
    1a8f:	c9                   	leave  
    1a90:	c3                   	ret    

0000000000001a91 <void std::_Destroy<int*>(int*, int*)>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    1a91:	55                   	push   rbp
    1a92:	48 89 e5             	mov    rbp,rsp
    1a95:	48 83 ec 10          	sub    rsp,0x10
    1a99:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1a9d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	__destroy(__first, __last);
    1aa1:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1aa5:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1aa9:	48 89 d6             	mov    rsi,rdx
    1aac:	48 89 c7             	mov    rdi,rax
    1aaf:	e8 1a 02 00 00       	call   1cce <void std::_Destroy_aux<true>::__destroy<int*>(int*, int*)>
    }
    1ab4:	90                   	nop
    1ab5:	c9                   	leave  
    1ab6:	c3                   	ret    
    1ab7:	90                   	nop

0000000000001ab8 <std::vector<int, std::allocator<int> >::size() const>:
      size() const _GLIBCXX_NOEXCEPT
    1ab8:	55                   	push   rbp
    1ab9:	48 89 e5             	mov    rbp,rsp
    1abc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
    1ac0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1ac4:	48 8b 40 08          	mov    rax,QWORD PTR [rax+0x8]
    1ac8:	48 89 c2             	mov    rdx,rax
    1acb:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1acf:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1ad2:	48 29 c2             	sub    rdx,rax
    1ad5:	48 89 d0             	mov    rax,rdx
    1ad8:	48 c1 f8 02          	sar    rax,0x2
    1adc:	5d                   	pop    rbp
    1add:	c3                   	ret    

0000000000001ade <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocator()>:
      allocator() throw() { }
    1ade:	55                   	push   rbp
    1adf:	48 89 e5             	mov    rbp,rsp
    1ae2:	48 83 ec 10          	sub    rsp,0x10
    1ae6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1aea:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1aee:	48 89 c7             	mov    rdi,rax
    1af1:	e8 0e 02 00 00       	call   1d04 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::new_allocator()>
    1af6:	90                   	nop
    1af7:	c9                   	leave  
    1af8:	c3                   	ret    
    1af9:	90                   	nop

0000000000001afa <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~allocator()>:
      ~allocator() throw() { }
    1afa:	55                   	push   rbp
    1afb:	48 89 e5             	mov    rbp,rsp
    1afe:	48 83 ec 10          	sub    rsp,0x10
    1b02:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1b06:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1b0a:	48 89 c7             	mov    rdi,rax
    1b0d:	e8 fe 01 00 00       	call   1d10 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~new_allocator()>
    1b12:	90                   	nop
    1b13:	c9                   	leave  
    1b14:	c3                   	ret    
    1b15:	90                   	nop

0000000000001b16 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector(unsigned long, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
      vector(size_type __n, const allocator_type& __a = allocator_type())
    1b16:	55                   	push   rbp
    1b17:	48 89 e5             	mov    rbp,rsp
    1b1a:	53                   	push   rbx
    1b1b:	48 83 ec 28          	sub    rsp,0x28
    1b1f:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    1b23:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    1b27:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
      : _Base(__n, __a)
    1b2b:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1b2f:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    1b33:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
    1b37:	48 89 ce             	mov    rsi,rcx
    1b3a:	48 89 c7             	mov    rdi,rax
    1b3d:	e8 da 01 00 00       	call   1d1c <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_base(unsigned long, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>
      { _M_default_initialize(__n); }
    1b42:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    1b46:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1b4a:	48 89 d6             	mov    rsi,rdx
    1b4d:	48 89 c7             	mov    rdi,rax
    1b50:	e8 25 02 00 00       	call   1d7a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_default_initialize(unsigned long)>
    1b55:	eb 1a                	jmp    1b71 <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::vector(unsigned long, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)+0x5b>
    1b57:	48 89 c3             	mov    rbx,rax
      : _Base(__n, __a)
    1b5a:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1b5e:	48 89 c7             	mov    rdi,rax
    1b61:	e8 94 fd ff ff       	call   18fa <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::~_Vector_base()>
    1b66:	48 89 d8             	mov    rax,rbx
    1b69:	48 89 c7             	mov    rdi,rax
    1b6c:	e8 3f f1 ff ff       	call   cb0 <_Unwind_Resume@plt>
      { _M_default_initialize(__n); }
    1b71:	48 83 c4 28          	add    rsp,0x28
    1b75:	5b                   	pop    rbx
    1b76:	5d                   	pop    rbp
    1b77:	c3                   	ret    

0000000000001b78 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>:
      _M_deallocate(pointer __p, size_t __n)
    1b78:	55                   	push   rbp
    1b79:	48 89 e5             	mov    rbp,rsp
    1b7c:	48 83 ec 20          	sub    rsp,0x20
    1b80:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1b84:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    1b88:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	if (__p)
    1b8c:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    1b91:	74 17                	je     1baa <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)+0x32>
	  _Tr::deallocate(_M_impl, __p, __n);
    1b93:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1b97:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    1b9b:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    1b9f:	48 89 ce             	mov    rsi,rcx
    1ba2:	48 89 c7             	mov    rdi,rax
    1ba5:	e8 13 02 00 00       	call   1dbd <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::deallocate(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
      }
    1baa:	90                   	nop
    1bab:	c9                   	leave  
    1bac:	c3                   	ret    

0000000000001bad <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    1bad:	55                   	push   rbp
    1bae:	48 89 e5             	mov    rbp,rsp
    1bb1:	48 83 ec 10          	sub    rsp,0x10
    1bb5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1bb9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	__destroy(__first, __last);
    1bbd:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1bc1:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1bc5:	48 89 d6             	mov    rsi,rdx
    1bc8:	48 89 c7             	mov    rdi,rax
    1bcb:	e8 29 02 00 00       	call   1df9 <void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
    }
    1bd0:	90                   	nop
    1bd1:	c9                   	leave  
    1bd2:	c3                   	ret    
    1bd3:	90                   	nop

0000000000001bd4 <std::_Vector_base<int, std::allocator<int> >::_Vector_impl::_Vector_impl(std::allocator<int> const&)>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    1bd4:	55                   	push   rbp
    1bd5:	48 89 e5             	mov    rbp,rsp
    1bd8:	48 83 ec 10          	sub    rsp,0x10
    1bdc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1be0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    1be4:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1be8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1bec:	48 89 d6             	mov    rsi,rdx
    1bef:	48 89 c7             	mov    rdi,rax
    1bf2:	e8 e7 00 00 00       	call   1cde <std::allocator<int>::allocator(std::allocator<int> const&)>
    1bf7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1bfb:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    1c02:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1c06:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
    1c0d:	00 
    1c0e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1c12:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
    1c19:	00 
	{ }
    1c1a:	90                   	nop
    1c1b:	c9                   	leave  
    1c1c:	c3                   	ret    
    1c1d:	90                   	nop

0000000000001c1e <std::_Vector_base<int, std::allocator<int> >::_M_create_storage(unsigned long)>:
      _M_create_storage(size_t __n)
    1c1e:	55                   	push   rbp
    1c1f:	48 89 e5             	mov    rbp,rsp
    1c22:	48 83 ec 10          	sub    rsp,0x10
    1c26:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1c2a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	this->_M_impl._M_start = this->_M_allocate(__n);
    1c2e:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1c32:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1c36:	48 89 d6             	mov    rsi,rdx
    1c39:	48 89 c7             	mov    rdi,rax
    1c3c:	e8 17 02 00 00       	call   1e58 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)>
    1c41:	48 89 c2             	mov    rdx,rax
    1c44:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1c48:	48 89 10             	mov    QWORD PTR [rax],rdx
	this->_M_impl._M_finish = this->_M_impl._M_start;
    1c4b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1c4f:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    1c52:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1c56:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    1c5a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1c5e:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1c61:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1c65:	48 c1 e2 02          	shl    rdx,0x2
    1c69:	48 01 c2             	add    rdx,rax
    1c6c:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1c70:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
      }
    1c74:	90                   	nop
    1c75:	c9                   	leave  
    1c76:	c3                   	ret    

0000000000001c77 <int* std::__uninitialized_default_n_a<int*, unsigned long, int>(int*, unsigned long, std::allocator<int>&)>:
	}
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline _ForwardIterator
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
    1c77:	55                   	push   rbp
    1c78:	48 89 e5             	mov    rbp,rsp
    1c7b:	48 83 ec 20          	sub    rsp,0x20
    1c7f:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1c83:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    1c87:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
				allocator<_Tp>&)
    { return std::__uninitialized_default_n(__first, __n); }
    1c8b:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1c8f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1c93:	48 89 d6             	mov    rsi,rdx
    1c96:	48 89 c7             	mov    rdi,rax
    1c99:	e8 ed 01 00 00       	call   1e8b <int* std::__uninitialized_default_n<int*, unsigned long>(int*, unsigned long)>
    1c9e:	c9                   	leave  
    1c9f:	c3                   	ret    

0000000000001ca0 <std::allocator_traits<std::allocator<int> >::deallocate(std::allocator<int>&, int*, unsigned long)>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    1ca0:	55                   	push   rbp
    1ca1:	48 89 e5             	mov    rbp,rsp
    1ca4:	48 83 ec 20          	sub    rsp,0x20
    1ca8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1cac:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    1cb0:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
      { __a.deallocate(__p, __n); }
    1cb4:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    1cb8:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    1cbc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1cc0:	48 89 ce             	mov    rsi,rcx
    1cc3:	48 89 c7             	mov    rdi,rax
    1cc6:	e8 e9 01 00 00       	call   1eb4 <__gnu_cxx::new_allocator<int>::deallocate(int*, unsigned long)>
    1ccb:	90                   	nop
    1ccc:	c9                   	leave  
    1ccd:	c3                   	ret    

0000000000001cce <void std::_Destroy_aux<true>::__destroy<int*>(int*, int*)>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
    1cce:	55                   	push   rbp
    1ccf:	48 89 e5             	mov    rbp,rsp
    1cd2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1cd6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    1cda:	90                   	nop
    1cdb:	5d                   	pop    rbp
    1cdc:	c3                   	ret    
    1cdd:	90                   	nop

0000000000001cde <std::allocator<int>::allocator(std::allocator<int> const&)>:
      allocator(const allocator& __a) throw()
    1cde:	55                   	push   rbp
    1cdf:	48 89 e5             	mov    rbp,rsp
    1ce2:	48 83 ec 10          	sub    rsp,0x10
    1ce6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1cea:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      : __allocator_base<_Tp>(__a) { }
    1cee:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1cf2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1cf6:	48 89 d6             	mov    rsi,rdx
    1cf9:	48 89 c7             	mov    rdi,rax
    1cfc:	e8 d7 01 00 00       	call   1ed8 <__gnu_cxx::new_allocator<int>::new_allocator(__gnu_cxx::new_allocator<int> const&)>
    1d01:	90                   	nop
    1d02:	c9                   	leave  
    1d03:	c3                   	ret    

0000000000001d04 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::new_allocator()>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    1d04:	55                   	push   rbp
    1d05:	48 89 e5             	mov    rbp,rsp
    1d08:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1d0c:	90                   	nop
    1d0d:	5d                   	pop    rbp
    1d0e:	c3                   	ret    
    1d0f:	90                   	nop

0000000000001d10 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::~new_allocator()>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
    1d10:	55                   	push   rbp
    1d11:	48 89 e5             	mov    rbp,rsp
    1d14:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1d18:	90                   	nop
    1d19:	5d                   	pop    rbp
    1d1a:	c3                   	ret    
    1d1b:	90                   	nop

0000000000001d1c <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_base(unsigned long, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
      _Vector_base(size_t __n, const allocator_type& __a)
    1d1c:	55                   	push   rbp
    1d1d:	48 89 e5             	mov    rbp,rsp
    1d20:	53                   	push   rbx
    1d21:	48 83 ec 28          	sub    rsp,0x28
    1d25:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    1d29:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    1d2d:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
      : _M_impl(__a)
    1d31:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1d35:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
    1d39:	48 89 d6             	mov    rsi,rdx
    1d3c:	48 89 c7             	mov    rdi,rax
    1d3f:	e8 a4 01 00 00       	call   1ee8 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::_Vector_impl(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>
      { _M_create_storage(__n); }
    1d44:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    1d48:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1d4c:	48 89 d6             	mov    rsi,rdx
    1d4f:	48 89 c7             	mov    rdi,rax
    1d52:	e8 db 01 00 00       	call   1f32 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_create_storage(unsigned long)>
    1d57:	eb 1a                	jmp    1d73 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_base(unsigned long, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)+0x57>
    1d59:	48 89 c3             	mov    rbx,rax
      : _M_impl(__a)
    1d5c:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1d60:	48 89 c7             	mov    rdi,rax
    1d63:	e8 76 fb ff ff       	call   18de <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::~_Vector_impl()>
    1d68:	48 89 d8             	mov    rax,rbx
    1d6b:	48 89 c7             	mov    rdi,rax
    1d6e:	e8 3d ef ff ff       	call   cb0 <_Unwind_Resume@plt>
      { _M_create_storage(__n); }
    1d73:	48 83 c4 28          	add    rsp,0x28
    1d77:	5b                   	pop    rbx
    1d78:	5d                   	pop    rbp
    1d79:	c3                   	ret    

0000000000001d7a <std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_default_initialize(unsigned long)>:
      _M_default_initialize(size_type __n)
    1d7a:	55                   	push   rbp
    1d7b:	48 89 e5             	mov    rbp,rsp
    1d7e:	48 83 ec 10          	sub    rsp,0x10
    1d82:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1d86:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
					   _M_get_Tp_allocator());
    1d8a:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1d8e:	48 89 c7             	mov    rdi,rax
    1d91:	e8 b4 fb ff ff       	call   194a <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_get_Tp_allocator()>
    1d96:	48 89 c2             	mov    rdx,rax
	  std::__uninitialized_default_n_a(this->_M_impl._M_start, __n,
    1d99:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1d9d:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1da0:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    1da4:	48 89 ce             	mov    rsi,rcx
    1da7:	48 89 c7             	mov    rdi,rax
    1daa:	e8 dc 01 00 00       	call   1f8b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__uninitialized_default_n_a<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>
    1daf:	48 89 c2             	mov    rdx,rax
	this->_M_impl._M_finish =
    1db2:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1db6:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
      }
    1dba:	90                   	nop
    1dbb:	c9                   	leave  
    1dbc:	c3                   	ret    

0000000000001dbd <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::deallocate(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
    1dbd:	55                   	push   rbp
    1dbe:	48 89 e5             	mov    rbp,rsp
    1dc1:	48 83 ec 20          	sub    rsp,0x20
    1dc5:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1dc9:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    1dcd:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
      { __a.deallocate(__p, __n); }
    1dd1:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    1dd5:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    1dd9:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1ddd:	48 89 ce             	mov    rsi,rcx
    1de0:	48 89 c7             	mov    rdi,rax
    1de3:	e8 cc 01 00 00       	call   1fb4 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
    1de8:	90                   	nop
    1de9:	c9                   	leave  
    1dea:	c3                   	ret    

0000000000001deb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    1deb:	55                   	push   rbp
    1dec:	48 89 e5             	mov    rbp,rsp
    1def:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return __builtin_addressof(__r); }
    1df3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1df7:	5d                   	pop    rbp
    1df8:	c3                   	ret    

0000000000001df9 <void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
    1df9:	55                   	push   rbp
    1dfa:	48 89 e5             	mov    rbp,rsp
    1dfd:	48 83 ec 10          	sub    rsp,0x10
    1e01:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1e05:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	  for (; __first != __last; ++__first)
    1e09:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1e0d:	48 3b 45 f0          	cmp    rax,QWORD PTR [rbp-0x10]
    1e11:	74 1b                	je     1e2e <void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)+0x35>
	    std::_Destroy(std::__addressof(*__first));
    1e13:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1e17:	48 89 c7             	mov    rdi,rax
    1e1a:	e8 cc ff ff ff       	call   1deb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
    1e1f:	48 89 c7             	mov    rdi,rax
    1e22:	e8 b0 01 00 00       	call   1fd7 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
	  for (; __first != __last; ++__first)
    1e27:	48 83 45 f8 20       	add    QWORD PTR [rbp-0x8],0x20
    1e2c:	eb db                	jmp    1e09 <void std::_Destroy_aux<false>::__destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)+0x10>
	}
    1e2e:	90                   	nop
    1e2f:	c9                   	leave  
    1e30:	c3                   	ret    
    1e31:	90                   	nop

0000000000001e32 <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocator(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
      allocator(const allocator& __a) throw()
    1e32:	55                   	push   rbp
    1e33:	48 89 e5             	mov    rbp,rsp
    1e36:	48 83 ec 10          	sub    rsp,0x10
    1e3a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1e3e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      : __allocator_base<_Tp>(__a) { }
    1e42:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1e46:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1e4a:	48 89 d6             	mov    rsi,rdx
    1e4d:	48 89 c7             	mov    rdi,rax
    1e50:	e8 9d 01 00 00       	call   1ff2 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::new_allocator(__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>
    1e55:	90                   	nop
    1e56:	c9                   	leave  
    1e57:	c3                   	ret    

0000000000001e58 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)>:
      _M_allocate(size_t __n)
    1e58:	55                   	push   rbp
    1e59:	48 89 e5             	mov    rbp,rsp
    1e5c:	48 83 ec 10          	sub    rsp,0x10
    1e60:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1e64:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    1e68:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    1e6d:	74 15                	je     1e84 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)+0x2c>
    1e6f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1e73:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1e77:	48 89 d6             	mov    rsi,rdx
    1e7a:	48 89 c7             	mov    rdi,rax
    1e7d:	e8 7f 01 00 00       	call   2001 <std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long)>
    1e82:	eb 05                	jmp    1e89 <std::_Vector_base<int, std::allocator<int> >::_M_allocate(unsigned long)+0x31>
    1e84:	b8 00 00 00 00       	mov    eax,0x0
      }
    1e89:	c9                   	leave  
    1e8a:	c3                   	ret    

0000000000001e8b <int* std::__uninitialized_default_n<int*, unsigned long>(int*, unsigned long)>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    1e8b:	55                   	push   rbp
    1e8c:	48 89 e5             	mov    rbp,rsp
    1e8f:	48 83 ec 20          	sub    rsp,0x20
    1e93:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    1e97:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
      const bool __assignable = is_copy_assignable<_ValueType>::value;
    1e9b:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
	__uninit_default_n(__first, __n);
    1e9f:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    1ea3:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    1ea7:	48 89 d6             	mov    rsi,rdx
    1eaa:	48 89 c7             	mov    rdi,rax
    1ead:	e8 79 01 00 00       	call   202b <int* std::__uninitialized_default_n_1<true>::__uninit_default_n<int*, unsigned long>(int*, unsigned long)>
    }
    1eb2:	c9                   	leave  
    1eb3:	c3                   	ret    

0000000000001eb4 <__gnu_cxx::new_allocator<int>::deallocate(int*, unsigned long)>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
    1eb4:	55                   	push   rbp
    1eb5:	48 89 e5             	mov    rbp,rsp
    1eb8:	48 83 ec 20          	sub    rsp,0x20
    1ebc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1ec0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    1ec4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
    1ec8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1ecc:	48 89 c7             	mov    rdi,rax
    1ecf:	e8 4c ed ff ff       	call   c20 <operator delete(void*)@plt>
      }
    1ed4:	90                   	nop
    1ed5:	c9                   	leave  
    1ed6:	c3                   	ret    
    1ed7:	90                   	nop

0000000000001ed8 <__gnu_cxx::new_allocator<int>::new_allocator(__gnu_cxx::new_allocator<int> const&)>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    1ed8:	55                   	push   rbp
    1ed9:	48 89 e5             	mov    rbp,rsp
    1edc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1ee0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    1ee4:	90                   	nop
    1ee5:	5d                   	pop    rbp
    1ee6:	c3                   	ret    
    1ee7:	90                   	nop

0000000000001ee8 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_Vector_impl::_Vector_impl(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
    1ee8:	55                   	push   rbp
    1ee9:	48 89 e5             	mov    rbp,rsp
    1eec:	48 83 ec 10          	sub    rsp,0x10
    1ef0:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1ef4:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
    1ef8:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1efc:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1f00:	48 89 d6             	mov    rsi,rdx
    1f03:	48 89 c7             	mov    rdi,rax
    1f06:	e8 27 ff ff ff       	call   1e32 <std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocator(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>
    1f0b:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1f0f:	48 c7 00 00 00 00 00 	mov    QWORD PTR [rax],0x0
    1f16:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1f1a:	48 c7 40 08 00 00 00 	mov    QWORD PTR [rax+0x8],0x0
    1f21:	00 
    1f22:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1f26:	48 c7 40 10 00 00 00 	mov    QWORD PTR [rax+0x10],0x0
    1f2d:	00 
	{ }
    1f2e:	90                   	nop
    1f2f:	c9                   	leave  
    1f30:	c3                   	ret    
    1f31:	90                   	nop

0000000000001f32 <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_create_storage(unsigned long)>:
      _M_create_storage(size_t __n)
    1f32:	55                   	push   rbp
    1f33:	48 89 e5             	mov    rbp,rsp
    1f36:	48 83 ec 10          	sub    rsp,0x10
    1f3a:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1f3e:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	this->_M_impl._M_start = this->_M_allocate(__n);
    1f42:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1f46:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1f4a:	48 89 d6             	mov    rsi,rdx
    1f4d:	48 89 c7             	mov    rdi,rax
    1f50:	e8 29 01 00 00       	call   207e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)>
    1f55:	48 89 c2             	mov    rdx,rax
    1f58:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1f5c:	48 89 10             	mov    QWORD PTR [rax],rdx
	this->_M_impl._M_finish = this->_M_impl._M_start;
    1f5f:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1f63:	48 8b 10             	mov    rdx,QWORD PTR [rax]
    1f66:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1f6a:	48 89 50 08          	mov    QWORD PTR [rax+0x8],rdx
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
    1f6e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1f72:	48 8b 00             	mov    rax,QWORD PTR [rax]
    1f75:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1f79:	48 c1 e2 05          	shl    rdx,0x5
    1f7d:	48 01 c2             	add    rdx,rax
    1f80:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1f84:	48 89 50 10          	mov    QWORD PTR [rax+0x10],rdx
      }
    1f88:	90                   	nop
    1f89:	c9                   	leave  
    1f8a:	c3                   	ret    

0000000000001f8b <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__uninitialized_default_n_a<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&)>:
    __uninitialized_default_n_a(_ForwardIterator __first, _Size __n, 
    1f8b:	55                   	push   rbp
    1f8c:	48 89 e5             	mov    rbp,rsp
    1f8f:	48 83 ec 20          	sub    rsp,0x20
    1f93:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1f97:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    1f9b:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    { return std::__uninitialized_default_n(__first, __n); }
    1f9f:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    1fa3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1fa7:	48 89 d6             	mov    rsi,rdx
    1faa:	48 89 c7             	mov    rdi,rax
    1fad:	e8 ff 00 00 00       	call   20b1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__uninitialized_default_n<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
    1fb2:	c9                   	leave  
    1fb3:	c3                   	ret    

0000000000001fb4 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::deallocate(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>:
      deallocate(pointer __p, size_type)
    1fb4:	55                   	push   rbp
    1fb5:	48 89 e5             	mov    rbp,rsp
    1fb8:	48 83 ec 20          	sub    rsp,0x20
    1fbc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1fc0:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    1fc4:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	::operator delete(__p);
    1fc8:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    1fcc:	48 89 c7             	mov    rdi,rax
    1fcf:	e8 4c ec ff ff       	call   c20 <operator delete(void*)@plt>
      }
    1fd4:	90                   	nop
    1fd5:	c9                   	leave  
    1fd6:	c3                   	ret    

0000000000001fd7 <void std::_Destroy<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
    _Destroy(_Tp* __pointer)
    1fd7:	55                   	push   rbp
    1fd8:	48 89 e5             	mov    rbp,rsp
    1fdb:	48 83 ec 10          	sub    rsp,0x10
    1fdf:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { __pointer->~_Tp(); }
    1fe3:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    1fe7:	48 89 c7             	mov    rdi,rax
    1fea:	e8 01 ec ff ff       	call   bf0 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string()@plt>
    1fef:	90                   	nop
    1ff0:	c9                   	leave  
    1ff1:	c3                   	ret    

0000000000001ff2 <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::new_allocator(__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > const&)>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
    1ff2:	55                   	push   rbp
    1ff3:	48 89 e5             	mov    rbp,rsp
    1ff6:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    1ffa:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    1ffe:	90                   	nop
    1fff:	5d                   	pop    rbp
    2000:	c3                   	ret    

0000000000002001 <std::allocator_traits<std::allocator<int> >::allocate(std::allocator<int>&, unsigned long)>:
      allocate(allocator_type& __a, size_type __n)
    2001:	55                   	push   rbp
    2002:	48 89 e5             	mov    rbp,rsp
    2005:	48 83 ec 10          	sub    rsp,0x10
    2009:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    200d:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      { return __a.allocate(__n); }
    2011:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    2015:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2019:	ba 00 00 00 00       	mov    edx,0x0
    201e:	48 89 ce             	mov    rsi,rcx
    2021:	48 89 c7             	mov    rdi,rax
    2024:	e8 b1 00 00 00       	call   20da <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*)>
    2029:	c9                   	leave  
    202a:	c3                   	ret    

000000000000202b <int* std::__uninitialized_default_n_1<true>::__uninit_default_n<int*, unsigned long>(int*, unsigned long)>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    202b:	55                   	push   rbp
    202c:	48 89 e5             	mov    rbp,rsp
    202f:	48 83 ec 20          	sub    rsp,0x20
    2033:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    2037:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    203b:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
    2042:	00 00 
    2044:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    2048:	31 c0                	xor    eax,eax
	  return std::fill_n(__first, __n, _ValueType());
    204a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [rbp-0xc],0x0
    2051:	48 8d 55 f4          	lea    rdx,[rbp-0xc]
    2055:	48 8b 4d e0          	mov    rcx,QWORD PTR [rbp-0x20]
    2059:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    205d:	48 89 ce             	mov    rsi,rcx
    2060:	48 89 c7             	mov    rdi,rax
    2063:	e8 b4 00 00 00       	call   211c <int* std::fill_n<int*, unsigned long, int>(int*, unsigned long, int const&)>
	}
    2068:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
    206c:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
    2073:	00 00 
    2075:	74 05                	je     207c <int* std::__uninitialized_default_n_1<true>::__uninit_default_n<int*, unsigned long>(int*, unsigned long)+0x51>
    2077:	e8 e4 eb ff ff       	call   c60 <__stack_chk_fail@plt>
    207c:	c9                   	leave  
    207d:	c3                   	ret    

000000000000207e <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)>:
      _M_allocate(size_t __n)
    207e:	55                   	push   rbp
    207f:	48 89 e5             	mov    rbp,rsp
    2082:	48 83 ec 10          	sub    rsp,0x10
    2086:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    208a:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
    208e:	48 83 7d f0 00       	cmp    QWORD PTR [rbp-0x10],0x0
    2093:	74 15                	je     20aa <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)+0x2c>
    2095:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2099:	48 8b 55 f0          	mov    rdx,QWORD PTR [rbp-0x10]
    209d:	48 89 d6             	mov    rsi,rdx
    20a0:	48 89 c7             	mov    rdi,rax
    20a3:	e8 ac 00 00 00       	call   2154 <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::allocate(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, unsigned long)>
    20a8:	eb 05                	jmp    20af <std::_Vector_base<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::_M_allocate(unsigned long)+0x31>
    20aa:	b8 00 00 00 00       	mov    eax,0x0
      }
    20af:	c9                   	leave  
    20b0:	c3                   	ret    

00000000000020b1 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__uninitialized_default_n<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>:
    __uninitialized_default_n(_ForwardIterator __first, _Size __n)
    20b1:	55                   	push   rbp
    20b2:	48 89 e5             	mov    rbp,rsp
    20b5:	48 83 ec 20          	sub    rsp,0x20
    20b9:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    20bd:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
      const bool __assignable = is_copy_assignable<_ValueType>::value;
    20c1:	c6 45 ff 01          	mov    BYTE PTR [rbp-0x1],0x1
	__uninit_default_n(__first, __n);
    20c5:	48 8b 55 e0          	mov    rdx,QWORD PTR [rbp-0x20]
    20c9:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    20cd:	48 89 d6             	mov    rsi,rdx
    20d0:	48 89 c7             	mov    rdi,rax
    20d3:	e8 a6 00 00 00       	call   217e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__uninitialized_default_n_1<false>::__uninit_default_n<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>
    }
    20d8:	c9                   	leave  
    20d9:	c3                   	ret    

00000000000020da <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*)>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    20da:	55                   	push   rbp
    20db:	48 89 e5             	mov    rbp,rsp
    20de:	48 83 ec 20          	sub    rsp,0x20
    20e2:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    20e6:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    20ea:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	if (__n > this->max_size())
    20ee:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    20f2:	48 89 c7             	mov    rdi,rax
    20f5:	e8 ca 00 00 00       	call   21c4 <__gnu_cxx::new_allocator<int>::max_size() const>
    20fa:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
    20fe:	0f 97 c0             	seta   al
    2101:	84 c0                	test   al,al
    2103:	74 05                	je     210a <__gnu_cxx::new_allocator<int>::allocate(unsigned long, void const*)+0x30>
	  std::__throw_bad_alloc();
    2105:	e8 d6 ea ff ff       	call   be0 <std::__throw_bad_alloc()@plt>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    210a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    210e:	48 c1 e0 02          	shl    rax,0x2
    2112:	48 89 c7             	mov    rdi,rax
    2115:	e8 16 eb ff ff       	call   c30 <operator new(unsigned long)@plt>
      }
    211a:	c9                   	leave  
    211b:	c3                   	ret    

000000000000211c <int* std::fill_n<int*, unsigned long, int>(int*, unsigned long, int const&)>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    211c:	55                   	push   rbp
    211d:	48 89 e5             	mov    rbp,rsp
    2120:	48 83 ec 20          	sub    rsp,0x20
    2124:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2128:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    212c:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
    2130:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2134:	48 89 c7             	mov    rdi,rax
    2137:	e8 9c 00 00 00       	call   21d8 <int* std::__niter_base<int*>(int*)>
    213c:	48 89 c1             	mov    rcx,rax
    213f:	48 8b 55 e8          	mov    rdx,QWORD PTR [rbp-0x18]
    2143:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    2147:	48 89 c6             	mov    rsi,rax
    214a:	48 89 cf             	mov    rdi,rcx
    214d:	e8 94 00 00 00       	call   21e6 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, int*>::__type std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&)>
    }
    2152:	c9                   	leave  
    2153:	c3                   	ret    

0000000000002154 <std::allocator_traits<std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::allocate(std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >&, unsigned long)>:
      allocate(allocator_type& __a, size_type __n)
    2154:	55                   	push   rbp
    2155:	48 89 e5             	mov    rbp,rsp
    2158:	48 83 ec 10          	sub    rsp,0x10
    215c:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2160:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
      { return __a.allocate(__n); }
    2164:	48 8b 4d f0          	mov    rcx,QWORD PTR [rbp-0x10]
    2168:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    216c:	ba 00 00 00 00       	mov    edx,0x0
    2171:	48 89 ce             	mov    rsi,rcx
    2174:	48 89 c7             	mov    rdi,rax
    2177:	e8 ae 00 00 00       	call   222a <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocate(unsigned long, void const*)>
    217c:	c9                   	leave  
    217d:	c3                   	ret    

000000000000217e <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__uninitialized_default_n_1<false>::__uninit_default_n<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)>:
        __uninit_default_n(_ForwardIterator __first, _Size __n)
    217e:	55                   	push   rbp
    217f:	48 89 e5             	mov    rbp,rsp
    2182:	48 83 ec 20          	sub    rsp,0x20
    2186:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    218a:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
	  _ForwardIterator __cur = __first;
    218e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    2192:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
	      for (; __n > 0; --__n, ++__cur)
    2196:	48 83 7d e0 00       	cmp    QWORD PTR [rbp-0x20],0x0
    219b:	74 20                	je     21bd <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__uninitialized_default_n_1<false>::__uninit_default_n<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)+0x3f>
		std::_Construct(std::__addressof(*__cur));
    219d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    21a1:	48 89 c7             	mov    rdi,rax
    21a4:	e8 42 fc ff ff       	call   1deb <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__addressof<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&)>
    21a9:	48 89 c7             	mov    rdi,rax
    21ac:	e8 bb 00 00 00       	call   226c <void std::_Construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>
	      for (; __n > 0; --__n, ++__cur)
    21b1:	48 83 6d e0 01       	sub    QWORD PTR [rbp-0x20],0x1
    21b6:	48 83 45 f8 20       	add    QWORD PTR [rbp-0x8],0x20
    21bb:	eb d9                	jmp    2196 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >* std::__uninitialized_default_n_1<false>::__uninit_default_n<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*, unsigned long)+0x18>
	      return __cur;
    21bd:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
	}
    21c1:	c9                   	leave  
    21c2:	c3                   	ret    
    21c3:	90                   	nop

00000000000021c4 <__gnu_cxx::new_allocator<int>::max_size() const>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
    21c4:	55                   	push   rbp
    21c5:	48 89 e5             	mov    rbp,rsp
    21c8:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return size_t(-1) / sizeof(_Tp); }
    21cc:	48 b8 ff ff ff ff ff 	movabs rax,0x3fffffffffffffff
    21d3:	ff ff 3f 
    21d6:	5d                   	pop    rbp
    21d7:	c3                   	ret    

00000000000021d8 <int* std::__niter_base<int*>(int*)>:
    __niter_base(_Iterator __it)
    21d8:	55                   	push   rbp
    21d9:	48 89 e5             	mov    rbp,rsp
    21dc:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { return __it; }
    21e0:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    21e4:	5d                   	pop    rbp
    21e5:	c3                   	ret    

00000000000021e6 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, int*>::__type std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&)>:
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    21e6:	55                   	push   rbp
    21e7:	48 89 e5             	mov    rbp,rsp
    21ea:	48 89 7d e8          	mov    QWORD PTR [rbp-0x18],rdi
    21ee:	48 89 75 e0          	mov    QWORD PTR [rbp-0x20],rsi
    21f2:	48 89 55 d8          	mov    QWORD PTR [rbp-0x28],rdx
      const _Tp __tmp = __value;
    21f6:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
    21fa:	8b 00                	mov    eax,DWORD PTR [rax]
    21fc:	89 45 f4             	mov    DWORD PTR [rbp-0xc],eax
      for (__decltype(__n + 0) __niter = __n;
    21ff:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
    2203:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
	   __niter > 0; --__niter, ++__first)
    2207:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
    220c:	74 15                	je     2223 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, int*>::__type std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&)+0x3d>
	*__first = __tmp;
    220e:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    2212:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
    2215:	89 10                	mov    DWORD PTR [rax],edx
      for (__decltype(__n + 0) __niter = __n;
    2217:	48 83 6d f8 01       	sub    QWORD PTR [rbp-0x8],0x1
    221c:	48 83 45 e8 04       	add    QWORD PTR [rbp-0x18],0x4
    2221:	eb e4                	jmp    2207 <__gnu_cxx::__enable_if<std::__is_scalar<int>::__value, int*>::__type std::__fill_n_a<int*, unsigned long, int>(int*, unsigned long, int const&)+0x21>
      return __first;
    2223:	48 8b 45 e8          	mov    rax,QWORD PTR [rbp-0x18]
    }
    2227:	5d                   	pop    rbp
    2228:	c3                   	ret    
    2229:	90                   	nop

000000000000222a <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocate(unsigned long, void const*)>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
    222a:	55                   	push   rbp
    222b:	48 89 e5             	mov    rbp,rsp
    222e:	48 83 ec 20          	sub    rsp,0x20
    2232:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    2236:	48 89 75 f0          	mov    QWORD PTR [rbp-0x10],rsi
    223a:	48 89 55 e8          	mov    QWORD PTR [rbp-0x18],rdx
	if (__n > this->max_size())
    223e:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    2242:	48 89 c7             	mov    rdi,rax
    2245:	e8 50 00 00 00       	call   229a <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::max_size() const>
    224a:	48 39 45 f0          	cmp    QWORD PTR [rbp-0x10],rax
    224e:	0f 97 c0             	seta   al
    2251:	84 c0                	test   al,al
    2253:	74 05                	je     225a <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::allocate(unsigned long, void const*)+0x30>
	  std::__throw_bad_alloc();
    2255:	e8 86 e9 ff ff       	call   be0 <std::__throw_bad_alloc()@plt>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    225a:	48 8b 45 f0          	mov    rax,QWORD PTR [rbp-0x10]
    225e:	48 c1 e0 05          	shl    rax,0x5
    2262:	48 89 c7             	mov    rdi,rax
    2265:	e8 c6 e9 ff ff       	call   c30 <operator new(unsigned long)@plt>
      }
    226a:	c9                   	leave  
    226b:	c3                   	ret    

000000000000226c <void std::_Construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)>:
    _Construct(_T1* __p, _Args&&... __args)
    226c:	55                   	push   rbp
    226d:	48 89 e5             	mov    rbp,rsp
    2270:	48 83 ec 10          	sub    rsp,0x10
    2274:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
    2278:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
    227c:	48 89 c6             	mov    rsi,rax
    227f:	bf 20 00 00 00       	mov    edi,0x20
    2284:	e8 a7 f1 ff ff       	call   1430 <operator new(unsigned long, void*)>
    2289:	48 85 c0             	test   rax,rax
    228c:	74 08                	je     2296 <void std::_Construct<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >>(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)+0x2a>
    228e:	48 89 c7             	mov    rdi,rax
    2291:	e8 fa e9 ff ff       	call   c90 <std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::basic_string()@plt>
    2296:	90                   	nop
    2297:	c9                   	leave  
    2298:	c3                   	ret    
    2299:	90                   	nop

000000000000229a <__gnu_cxx::new_allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >::max_size() const>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
    229a:	55                   	push   rbp
    229b:	48 89 e5             	mov    rbp,rsp
    229e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
      { return size_t(-1) / sizeof(_Tp); }
    22a2:	48 b8 ff ff ff ff ff 	movabs rax,0x7ffffffffffffff
    22a9:	ff ff 07 
    22ac:	5d                   	pop    rbp
    22ad:	c3                   	ret    
    22ae:	66 90                	xchg   ax,ax

00000000000022b0 <__libc_csu_init>:
    22b0:	41 57                	push   r15
    22b2:	41 56                	push   r14
    22b4:	49 89 d7             	mov    r15,rdx
    22b7:	41 55                	push   r13
    22b9:	41 54                	push   r12
    22bb:	4c 8d 25 4e 1a 20 00 	lea    r12,[rip+0x201a4e]        # 203d10 <__frame_dummy_init_array_entry>
    22c2:	55                   	push   rbp
    22c3:	48 8d 2d 56 1a 20 00 	lea    rbp,[rip+0x201a56]        # 203d20 <__init_array_end>
    22ca:	53                   	push   rbx
    22cb:	41 89 fd             	mov    r13d,edi
    22ce:	49 89 f6             	mov    r14,rsi
    22d1:	4c 29 e5             	sub    rbp,r12
    22d4:	48 83 ec 08          	sub    rsp,0x8
    22d8:	48 c1 fd 03          	sar    rbp,0x3
    22dc:	e8 cf e8 ff ff       	call   bb0 <_init>
    22e1:	48 85 ed             	test   rbp,rbp
    22e4:	74 20                	je     2306 <__libc_csu_init+0x56>
    22e6:	31 db                	xor    ebx,ebx
    22e8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
    22ef:	00 
    22f0:	4c 89 fa             	mov    rdx,r15
    22f3:	4c 89 f6             	mov    rsi,r14
    22f6:	44 89 ef             	mov    edi,r13d
    22f9:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
    22fd:	48 83 c3 01          	add    rbx,0x1
    2301:	48 39 dd             	cmp    rbp,rbx
    2304:	75 ea                	jne    22f0 <__libc_csu_init+0x40>
    2306:	48 83 c4 08          	add    rsp,0x8
    230a:	5b                   	pop    rbx
    230b:	5d                   	pop    rbp
    230c:	41 5c                	pop    r12
    230e:	41 5d                	pop    r13
    2310:	41 5e                	pop    r14
    2312:	41 5f                	pop    r15
    2314:	c3                   	ret    
    2315:	90                   	nop
    2316:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
    231d:	00 00 00 

0000000000002320 <__libc_csu_fini>:
    2320:	f3 c3                	repz ret 

Disassembly of section .fini:

0000000000002324 <_fini>:
    2324:	48 83 ec 08          	sub    rsp,0x8
    2328:	48 83 c4 08          	add    rsp,0x8
    232c:	c3                   	ret    
