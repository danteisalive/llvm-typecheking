
value-g++:     file format elf64-x86-64


Disassembly of section .init:

0000000000000510 <_init>:
 510:	48 83 ec 08          	sub    rsp,0x8
 514:	48 8b 05 cd 0a 20 00 	mov    rax,QWORD PTR [rip+0x200acd]        # 200fe8 <__gmon_start__>
 51b:	48 85 c0             	test   rax,rax
 51e:	74 02                	je     522 <_init+0x12>
 520:	ff d0                	call   rax
 522:	48 83 c4 08          	add    rsp,0x8
 526:	c3                   	ret    

Disassembly of section .plt:

0000000000000530 <.plt>:
 530:	ff 35 8a 0a 20 00    	push   QWORD PTR [rip+0x200a8a]        # 200fc0 <_GLOBAL_OFFSET_TABLE_+0x8>
 536:	ff 25 8c 0a 20 00    	jmp    QWORD PTR [rip+0x200a8c]        # 200fc8 <_GLOBAL_OFFSET_TABLE_+0x10>
 53c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000000540 <__stack_chk_fail@plt>:
 540:	ff 25 8a 0a 20 00    	jmp    QWORD PTR [rip+0x200a8a]        # 200fd0 <__stack_chk_fail@GLIBC_2.4>
 546:	68 00 00 00 00       	push   0x0
 54b:	e9 e0 ff ff ff       	jmp    530 <.plt>

Disassembly of section .plt.got:

0000000000000550 <__cxa_finalize@plt>:
 550:	ff 25 a2 0a 20 00    	jmp    QWORD PTR [rip+0x200aa2]        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 556:	66 90                	xchg   ax,ax

Disassembly of section .text:

0000000000000560 <_start>:
 560:	31 ed                	xor    ebp,ebp
 562:	49 89 d1             	mov    r9,rdx
 565:	5e                   	pop    rsi
 566:	48 89 e2             	mov    rdx,rsp
 569:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
 56d:	50                   	push   rax
 56e:	54                   	push   rsp
 56f:	4c 8d 05 2a 02 00 00 	lea    r8,[rip+0x22a]        # 7a0 <__libc_csu_fini>
 576:	48 8d 0d b3 01 00 00 	lea    rcx,[rip+0x1b3]        # 730 <__libc_csu_init>
 57d:	48 8d 3d fe 00 00 00 	lea    rdi,[rip+0xfe]        # 682 <main>
 584:	ff 15 56 0a 20 00    	call   QWORD PTR [rip+0x200a56]        # 200fe0 <__libc_start_main@GLIBC_2.2.5>
 58a:	f4                   	hlt    
 58b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000000590 <deregister_tm_clones>:
 590:	48 8d 3d 79 0a 20 00 	lea    rdi,[rip+0x200a79]        # 201010 <__TMC_END__>
 597:	55                   	push   rbp
 598:	48 8d 05 71 0a 20 00 	lea    rax,[rip+0x200a71]        # 201010 <__TMC_END__>
 59f:	48 39 f8             	cmp    rax,rdi
 5a2:	48 89 e5             	mov    rbp,rsp
 5a5:	74 19                	je     5c0 <deregister_tm_clones+0x30>
 5a7:	48 8b 05 2a 0a 20 00 	mov    rax,QWORD PTR [rip+0x200a2a]        # 200fd8 <_ITM_deregisterTMCloneTable>
 5ae:	48 85 c0             	test   rax,rax
 5b1:	74 0d                	je     5c0 <deregister_tm_clones+0x30>
 5b3:	5d                   	pop    rbp
 5b4:	ff e0                	jmp    rax
 5b6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 5bd:	00 00 00 
 5c0:	5d                   	pop    rbp
 5c1:	c3                   	ret    
 5c2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 5c6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 5cd:	00 00 00 

00000000000005d0 <register_tm_clones>:
 5d0:	48 8d 3d 39 0a 20 00 	lea    rdi,[rip+0x200a39]        # 201010 <__TMC_END__>
 5d7:	48 8d 35 32 0a 20 00 	lea    rsi,[rip+0x200a32]        # 201010 <__TMC_END__>
 5de:	55                   	push   rbp
 5df:	48 29 fe             	sub    rsi,rdi
 5e2:	48 89 e5             	mov    rbp,rsp
 5e5:	48 c1 fe 03          	sar    rsi,0x3
 5e9:	48 89 f0             	mov    rax,rsi
 5ec:	48 c1 e8 3f          	shr    rax,0x3f
 5f0:	48 01 c6             	add    rsi,rax
 5f3:	48 d1 fe             	sar    rsi,1
 5f6:	74 18                	je     610 <register_tm_clones+0x40>
 5f8:	48 8b 05 f1 09 20 00 	mov    rax,QWORD PTR [rip+0x2009f1]        # 200ff0 <_ITM_registerTMCloneTable>
 5ff:	48 85 c0             	test   rax,rax
 602:	74 0c                	je     610 <register_tm_clones+0x40>
 604:	5d                   	pop    rbp
 605:	ff e0                	jmp    rax
 607:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
 60e:	00 00 
 610:	5d                   	pop    rbp
 611:	c3                   	ret    
 612:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 616:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 61d:	00 00 00 

0000000000000620 <__do_global_dtors_aux>:
 620:	80 3d e9 09 20 00 00 	cmp    BYTE PTR [rip+0x2009e9],0x0        # 201010 <__TMC_END__>
 627:	75 2f                	jne    658 <__do_global_dtors_aux+0x38>
 629:	48 83 3d c7 09 20 00 	cmp    QWORD PTR [rip+0x2009c7],0x0        # 200ff8 <__cxa_finalize@GLIBC_2.2.5>
 630:	00 
 631:	55                   	push   rbp
 632:	48 89 e5             	mov    rbp,rsp
 635:	74 0c                	je     643 <__do_global_dtors_aux+0x23>
 637:	48 8b 3d ca 09 20 00 	mov    rdi,QWORD PTR [rip+0x2009ca]        # 201008 <__dso_handle>
 63e:	e8 0d ff ff ff       	call   550 <__cxa_finalize@plt>
 643:	e8 48 ff ff ff       	call   590 <deregister_tm_clones>
 648:	c6 05 c1 09 20 00 01 	mov    BYTE PTR [rip+0x2009c1],0x1        # 201010 <__TMC_END__>
 64f:	5d                   	pop    rbp
 650:	c3                   	ret    
 651:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
 658:	f3 c3                	repz ret 
 65a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000000660 <frame_dummy>:
 660:	55                   	push   rbp
 661:	48 89 e5             	mov    rbp,rsp
 664:	5d                   	pop    rbp
 665:	e9 66 ff ff ff       	jmp    5d0 <register_tm_clones>

000000000000066a <main::{lambda(int)#1}::operator()(int) const>:
};

int main() {
  int x = 3;

  auto lambda = [=] (int a) { return a + x; };
 66a:	55                   	push   rbp
 66b:	48 89 e5             	mov    rbp,rsp
 66e:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
 672:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
 675:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
 679:	8b 10                	mov    edx,DWORD PTR [rax]
 67b:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 67e:	01 d0                	add    eax,edx
 680:	5d                   	pop    rbp
 681:	c3                   	ret    

0000000000000682 <main>:
int main() {
 682:	55                   	push   rbp
 683:	48 89 e5             	mov    rbp,rsp
 686:	48 83 ec 20          	sub    rsp,0x20
 68a:	64 48 8b 04 25 28 00 	mov    rax,QWORD PTR fs:0x28
 691:	00 00 
 693:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
 697:	31 c0                	xor    eax,eax
  int x = 3;
 699:	c7 45 f4 03 00 00 00 	mov    DWORD PTR [rbp-0xc],0x3
  auto lambda = [=] (int a) { return a + x; };
 6a0:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 6a3:	89 45 e4             	mov    DWORD PTR [rbp-0x1c],eax
  Functor functor(x);
 6a6:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
 6a9:	48 8d 45 e8          	lea    rax,[rbp-0x18]
 6ad:	89 d6                	mov    esi,edx
 6af:	48 89 c7             	mov    rdi,rax
 6b2:	e8 43 00 00 00       	call   6fa <Functor::Functor(int)>

  volatile int y1 = functor(5);
 6b7:	48 8d 45 e8          	lea    rax,[rbp-0x18]
 6bb:	be 05 00 00 00       	mov    esi,0x5
 6c0:	48 89 c7             	mov    rdi,rax
 6c3:	e8 4a 00 00 00       	call   712 <Functor::operator()(int)>
 6c8:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  volatile int y2 = lambda(5);
 6cb:	48 8d 45 e4          	lea    rax,[rbp-0x1c]
 6cf:	be 05 00 00 00       	mov    esi,0x5
 6d4:	48 89 c7             	mov    rdi,rax
 6d7:	e8 8e ff ff ff       	call   66a <main::{lambda(int)#1}::operator()(int) const>
 6dc:	89 45 f0             	mov    DWORD PTR [rbp-0x10],eax

  return 0;
 6df:	b8 00 00 00 00       	mov    eax,0x0
}
 6e4:	48 8b 4d f8          	mov    rcx,QWORD PTR [rbp-0x8]
 6e8:	64 48 33 0c 25 28 00 	xor    rcx,QWORD PTR fs:0x28
 6ef:	00 00 
 6f1:	74 05                	je     6f8 <main+0x76>
 6f3:	e8 48 fe ff ff       	call   540 <__stack_chk_fail@plt>
 6f8:	c9                   	leave  
 6f9:	c3                   	ret    

00000000000006fa <Functor::Functor(int)>:
    Functor(const int x): m_x(x) {}
 6fa:	55                   	push   rbp
 6fb:	48 89 e5             	mov    rbp,rsp
 6fe:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
 702:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
 705:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
 709:	8b 55 f4             	mov    edx,DWORD PTR [rbp-0xc]
 70c:	89 10                	mov    DWORD PTR [rax],edx
 70e:	90                   	nop
 70f:	5d                   	pop    rbp
 710:	c3                   	ret    
 711:	90                   	nop

0000000000000712 <Functor::operator()(int)>:
    int operator()(int a) {
 712:	55                   	push   rbp
 713:	48 89 e5             	mov    rbp,rsp
 716:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
 71a:	89 75 f4             	mov    DWORD PTR [rbp-0xc],esi
      return a + m_x;
 71d:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
 721:	8b 10                	mov    edx,DWORD PTR [rax]
 723:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 726:	01 d0                	add    eax,edx
    }
 728:	5d                   	pop    rbp
 729:	c3                   	ret    
 72a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000000730 <__libc_csu_init>:
 730:	41 57                	push   r15
 732:	41 56                	push   r14
 734:	49 89 d7             	mov    r15,rdx
 737:	41 55                	push   r13
 739:	41 54                	push   r12
 73b:	4c 8d 25 76 06 20 00 	lea    r12,[rip+0x200676]        # 200db8 <__frame_dummy_init_array_entry>
 742:	55                   	push   rbp
 743:	48 8d 2d 76 06 20 00 	lea    rbp,[rip+0x200676]        # 200dc0 <__init_array_end>
 74a:	53                   	push   rbx
 74b:	41 89 fd             	mov    r13d,edi
 74e:	49 89 f6             	mov    r14,rsi
 751:	4c 29 e5             	sub    rbp,r12
 754:	48 83 ec 08          	sub    rsp,0x8
 758:	48 c1 fd 03          	sar    rbp,0x3
 75c:	e8 af fd ff ff       	call   510 <_init>
 761:	48 85 ed             	test   rbp,rbp
 764:	74 20                	je     786 <__libc_csu_init+0x56>
 766:	31 db                	xor    ebx,ebx
 768:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
 76f:	00 
 770:	4c 89 fa             	mov    rdx,r15
 773:	4c 89 f6             	mov    rsi,r14
 776:	44 89 ef             	mov    edi,r13d
 779:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
 77d:	48 83 c3 01          	add    rbx,0x1
 781:	48 39 dd             	cmp    rbp,rbx
 784:	75 ea                	jne    770 <__libc_csu_init+0x40>
 786:	48 83 c4 08          	add    rsp,0x8
 78a:	5b                   	pop    rbx
 78b:	5d                   	pop    rbp
 78c:	41 5c                	pop    r12
 78e:	41 5d                	pop    r13
 790:	41 5e                	pop    r14
 792:	41 5f                	pop    r15
 794:	c3                   	ret    
 795:	90                   	nop
 796:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
 79d:	00 00 00 

00000000000007a0 <__libc_csu_fini>:
 7a0:	f3 c3                	repz ret 

Disassembly of section .fini:

00000000000007a4 <_fini>:
 7a4:	48 83 ec 08          	sub    rsp,0x8
 7a8:	48 83 c4 08          	add    rsp,0x8
 7ac:	c3                   	ret    
